class "";
import classes JSON, Functions.Variable;

inclass


  proc test_JSON_encode_null(case: UnitTesting.Case);

    var _json: JSON;

    with case do

      _json = JSON.new;
      assert_equal(  _json.encode(nil), 'null');
    end;
  end;


  proc test_JSON_encode_boolean(case: UnitTesting.Case);

    var _json: JSON;

    with case do

      _json = JSON.new;
      assert_equal(  _json.encode(true),  'true');
      assert_equal(  _json.encode(false), 'false');
    end;
  end;


  proc test_JSON_encode_numeric(case: UnitTesting.Case);

    var _json: JSON;

    with case do

      _json = JSON.new;
      assert_equal(  _json.encode(0),      '0');
      assert_equal(  _json.encode(2000),   '2000');
      assert_equal(  _json.encode(-2000),  '-2000');
      assert_equal(  _json.encode(20.05),  '20.05');
      assert_equal(  _json.encode(-20.05), '-20.05');
    end;
  end;


  proc test_JSON_encode_date(case: UnitTesting.Case);

    var _json: JSON;

    with case do

      _json = JSON.new;
      assert_equal(  _json.encode(2018.06.01),                      '"2018-06-01"');

      _json = JSON.new(Escaper.new, "+03:00");
      assert_equal(  _json.encode(2018.06.01 12:00),     '"2018-06-01T12:00:00+03:00"');
      assert_equal(  _json.encode(2018.06.01 12:00:15),  '"2018-06-01T12:00:15+03:00"');

      _json = JSON.new(Escaper.new, "Z");
      assert_equal(  _json.encode(2018.06.01 12:00:15),       '"2018-06-01T12:00:15Z"');
    end;
  end;


  proc test_JSON_encode_string(case: UnitTesting.Case);

    var _json: JSON;

    with case do

      _json = JSON.new;
      assert_equal(  _json.encode('abc'),           '"abc"');
      assert_equal(  _json.encode('foobar500'),     '"foobar500"');
      assert_equal(  _json.encode('"foobar"'),      '"\"foobar\""');
      assert_equal(  _json.encode('\"foobar\"?'),   '"\\\"foobar\\\"?"');
      assert_equal(  _json.encode('\\"foobar\\"!'), '"\\\\\"foobar\\\\\"!"');
    end;
  end;


  proc test_JSON_encode_array(case: UnitTesting.Case);

    var _json: JSON;

    with case do

      _json = JSON.new;
      assert_equal(  _json.encode([] as variant[]), '[]', 'с пустым массивом');

      assert_equal(  _json.encode([nil]),       '[null]', 'с nil');
      assert_equal(  _json.encode([nil, nil]),  '[null, null]');

      assert_equal(  _json.encode([true]),         '[true]', 'с булевыми типами');
      assert_equal(  _json.encode([true, false]),  '[true, false]');

      assert_equal(  _json.encode([10]),             '[10]', 'с числами');
      assert_equal(  _json.encode([10, 20]),         '[10, 20]');
      assert_equal(  _json.encode([-10]),            '[-10]');
      assert_equal(  _json.encode([-10, -20]),       '[-10, -20]');
      assert_equal(  _json.encode([0.05]),           '[0.05]');
      assert_equal(  _json.encode([0.05, 0.07]),     '[0.05, 0.07]');
      assert_equal(  _json.encode([-0.05]),          '[-0.05]');
      assert_equal(  _json.encode([-0.05, -0.07]),   '[-0.05, -0.07]');

      assert_equal(  _json.encode(['a']),                  '["a"]', 'со строками');
      assert_equal(  _json.encode(['a', 'b']),             '["a", "b"]');
      assert_equal(  _json.encode(['"foo \"bar \\"baz']),  '["\"foo \\\"bar \\\\\"baz"]');

      assert_equal(  _json.encode([10, 20, -0.05, 0.07]),                   '[10, 20, -0.05, 0.07]', 'с комбинированными данными');
      assert_equal(  _json.encode(['\"foo', 500]),                          '["\\\"foo", 500]');
      assert_equal(  _json.encode([0.05, '1', '\\\"foo \"bar "baz', 500]),  '[0.05, "1", "\\\\\\\"foo \\\"bar \"baz", 500]');

      assert_equal(  _json.encode([[10]]),                                  '[[10]]', 'с вложенными массивами');
      assert_equal(  _json.encode([[10, 20], [30, 40]]),                    '[[10, 20], [30, 40]]');
      assert_equal(  _json.encode([10, [20, [30, 40] as variant[]]]),       '[10, [20, [30, 40]]]');

      assert_equal(  _json.encode([Dict.new]),                                                 '[{}]', 'с объектами');
      assert_equal(  _json.encode([Dict.new.set('A', 1)]),                                     '[{"A": 1}]');
      assert_equal(  _json.encode([Dict.new.set('A', [Dict.new.set('B', [] as variant[])])]),  '[{"A": [{"B": []}]}]');  -- без привдения записывал nil
    end;
  end;


  proc test_JSON_encode_object(case: UnitTesting.Case);

    var _json: JSON;

    with case do

      _json = JSON.new;
      assert_equal(  _json.encode(  Dict.new  ),                                            '{}');
      assert_equal(  _json.encode(  Dict.new.set('A', 1)  ),                                '{"A": 1}');
      assert_equal(  _json.encode(  Dict.combine(['A', 'B'], [1, 2])  ),                    '{"A": 1, "B": 2}');
      assert_equal(  _json.encode(  Dict.combine(['A', 'B', 'C'], [1, 'foo', '""bar'])  ),  '{"A": 1, "B": "foo", "C": "\"\"bar"}');
      assert_equal(  _json.encode(  Dict.new.set('A', [Dict.new.set('B', [Dict.new])])  ),  '{"A": [{"B": [{}]}]}');
    end;
  end;


  proc test_JSON_decode_null(case: UnitTesting.Case);

    var _json: JSON;

    with case do

      _json = JSON.new;
      assert_equal(  _json.decode('null'),       nil);
    end;
  end;


  proc test_JSON_decode_boolean(case: UnitTesting.Case);

    var _json: JSON;

    with case do

      _json = JSON.new;
      assert_equal(  _json.decode('true'),   true);
      assert_equal(  _json.decode('false'),  false);
    end;
  end;


  proc test_JSON_decode_numeric(case: UnitTesting.Case);

    var _json: JSON;

    with case do

      _json = JSON.new;
      assert_equal(  _json.decode('0'),      0);
      assert_equal(  _json.decode('1'),      1);
      assert_equal(  _json.decode('100'),    100);
      assert_equal(  _json.decode('-100'),   -100);
      assert_equal(  _json.decode('10.05'),  10.05);
      assert_equal(  _json.decode('-10.05'), -10.05);
    end;
  end;


  proc test_JSON_decode_string(case: UnitTesting.Case);

    var _json: JSON;

    with case do

      _json = JSON.new;
      assert_equal(  _json.decode('""'),           '');
      assert_equal(  _json.decode('" "'),          ' ');
      assert_equal(  _json.decode('"a"'),          'a');
      assert_equal(  _json.decode('"abc"'),        'abc');
      assert_equal(  _json.decode('"foo\"bar\""'), 'foo"bar"');
    end;
  end;


  proc test_JSON_decode_array(case: UnitTesting.Case);

    var _json: JSON;

    with case do

      _json = JSON.new;
      assert_equal(  _json.decode('[]'),          []);
      assert_equal(  _json.decode('[""]'),        ['']);
      assert_equal(  _json.decode('["a"]'),       ['a']);
      assert_equal(  _json.decode('["a", "b"]'),  ['a', 'b']);

      assert_equal(  _json.decode('[[]]'),              [[]]);
      assert_equal(  _json.decode('[[1]]'),             [[1]]);
      assert_equal(  _json.decode('[[1, 2], [3, 4]]'),  [[1, 2], [3, 4]]);
    end;
  end;


  proc test_JSON_decode_object(case: UnitTesting.Case);

    var _json: JSON;

    with case do

      _json = JSON.new;
      assert_equal(  _json.decode('{}').pairs,                  Dict.new.pairs);
      assert_equal(  _json.decode('{"A": 10}').pairs,           Dict.new.set('A', 10).pairs);
      assert_equal(  _json.decode('{"A": 10, "B": 20}').pairs,  Dict.combine(['A', 'B'], [10, 20]).pairs);

      assert_equal(  _json.decode('{"A": [10, 20, 30]}').pairs,   Dict.new.set('A', [10, 20, 30]).pairs);
      assert_equal(  _json.decode('{"A": "\\foo \"bar"}').pairs,  Dict.new.set('A', '\foo "bar').pairs);
      assert_equal(  var_to_dump(_json.decode('{"A": {"B": [50]}}')),  var_to_dump(Dict.new.set('A', Dict.new.set('B', [50]))) );
    end;
  end;
end