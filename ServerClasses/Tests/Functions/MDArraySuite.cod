class inherited UnitTesting.Suite "Набор для тестирования класса для работы с массивами";
import classes Functions.Array;

inclass


  proc test_md_array_length(case: UnitTesting.Case);

    var test_array: variant[];

    with case do

      -- те же проверки, но для многомерных массивов

      test_array = [[]];
      assert_equal(md_array_length(test_array), 1, "с многомерными массивами без значений");

      test_array = [[], []];
      assert_equal(md_array_length(test_array), 2);
      assert_equal(md_array_length(test_array[2]), 0, "с указанием подмассива");

      test_array[3] = [];
      assert_equal(md_array_length(test_array), 3, "с динамическим добавлением значений");
      assert_equal(md_array_length(test_array[3]), 0);

      test_array[4] = [];
      test_array[5] = [];
      assert_equal(md_array_length(test_array), 5);


      test_array = [[10]];
      assert_equal(md_array_length(test_array), 1, "с многомерными массивами со значениями");

      test_array = [[10], [20]];
      assert_equal(md_array_length(test_array), 2);
      assert_equal(md_array_length(test_array[2]), 1, "с указанием подмассива");

      test_array[3] = [30];
      assert_equal(md_array_length(test_array), 3, "с динамическим добавлением значений");
      assert_equal(md_array_length(test_array[3]), 1);

      test_array[4] = [40];
      test_array[5] = [50];
      assert_equal(md_array_length(test_array), 5);


      test_array = [[00, 10]];
      assert_equal(md_array_length(test_array), 1, "с многомерными массивами со множеством значений");

      test_array = [[00, 10], [20, 30]];
      assert_equal(md_array_length(test_array), 2);
      assert_equal(md_array_length(test_array[2]), 2, "с указанием подмассива");

      test_array[3] = [40, 50];
      assert_equal(md_array_length(test_array), 3, "с динамическим добавлением значений");
      assert_equal(md_array_length(test_array[3]), 2);

      test_array[4] = [60, 70];
      test_array[5] = [80, 90];
      assert_equal(md_array_length(test_array), 5);
    end;
  end;


  proc test_md_array_get(case: UnitTesting.Case);

    var test_array: variant[];

    with case do

      comment("те же проверки, но для многомерных массивов");

      test_array = [
        [05, 10],
        [20, 30],
        [40, 50],
        [60, 70],
        [80, 90]
      ];

      assert_equal(  md_array_get(test_array, 0, [1]),      05,  "проверка с нулевым индексом");

      assert_equal(  md_array_get(test_array, 1, [1]),      05,  "проверки с положительным индексом");
      assert_equal(  md_array_get(test_array, 2, [1]),      20);
      assert_equal(  md_array_get(test_array, 1, [2]),      10);
      assert_equal(  md_array_get(test_array, 2, [2]),      30);

      assert_equal(  md_array_get(test_array, -1, [1]),     80,  "проверки с отрицательым индексом");
      assert_equal(  md_array_get(test_array, -2, [1]),     60);
      assert_equal(  md_array_get(test_array, -1, [2]),     90);
      assert_equal(  md_array_get(test_array, -2, [2]),     70);

      assert_equal(  md_array_get(test_array, 6, [1]),      nil, "проверки с выходящим индексом");
      assert_equal(  md_array_get(test_array, -6, [1]),     05);

      assert_equal(  md_array_get(test_array, 6, [1], "oops"),   "oops", "проверки со значением по-умолчанию");
      assert_equal(  md_array_get(test_array, -6, [1], "oops"),  05);
    end;
  end;


  proc test_md_array_set(case: UnitTesting.Case);

    var test_array: variant[];

    with case do

      -- те же проверки, но для многомерных массивов

      test_array = [
        [00, 10],
        [20, 30],
        [40, 50] as variant[]
      ];

      md_array_set(test_array, 0, [0], 05);
      assert_equal(test_array, [[05, 10], [20, 30], [40, 50]], "с нулевыми индексами");

      md_array_set(test_array, 0, [1], 10);
      assert_equal(test_array, [[10, 10], [20, 30], [40, 50]]);

      md_array_set(test_array, 1, [0], 15);
      assert_equal(test_array, [[15, 10], [20, 30], [40, 50]]);


      md_array_set(test_array, 1, [1], 20);
      assert_equal(test_array, [[20, 10], [20, 30], [40, 50]], "с положительными индексами");

      md_array_set(test_array, 1, [2], 20);
      assert_equal(test_array, [[20, 20], [20, 30], [40, 50]]);

      md_array_set(test_array, 3, [1], 50);
      assert_equal(test_array, [[20, 20], [20, 30], [50, 50]]);

      md_array_set(test_array, 3, [2], 60);
      assert_equal(test_array, [[20, 20], [20, 30], [50, 60]]);


      md_array_set(test_array, -1, [1], 60);
      assert_equal(test_array, [[20, 20], [20, 30], [60, 60]], "с отрицательными индексами");

      md_array_set(test_array, -1, [2], 70);
      assert_equal(test_array, [[20, 20], [20, 30], [60, 70]]);

      md_array_set(test_array, -3, [-1], 25);
      assert_equal(test_array, [[20, 25], [20, 30], [60, 70]]);

      md_array_set(test_array, -3, [2], 30);
      assert_equal(test_array, [[20, 30], [20, 30], [60, 70]]);


      md_array_set(test_array, 4, [1], 80);
      assert_equal(test_array, [[20, 30], [20, 30], [60, 70]], "с выходящими индексами");

      md_array_set(test_array, -4, [2], 40);
      assert_equal(test_array, [[20, 40], [20, 30], [60, 70]]);

      md_array_set(test_array, 1, [-3], 30);
      assert_equal(test_array, [[30, 40], [20, 30], [60, 70]]);

      md_array_set(test_array, 1, [3], 50);
      assert_equal(test_array, [[30, 40, 50], [20, 30], [60, 70]]);
    end;
  end;


  proc test_md_array_unset(case: UnitTesting.Case);

    var test_array: variant[];

    with case do

      -- те же проверки, но для многомерных массивов

      test_array = [
        [00, 10],
        [20, 30],
        [40, 50] as variant[]
      ];

      md_array_unset(test_array, 1, [2]);
      assert_equal(test_array, [[00], [20, 30], [40, 50]], "с положительными индексами");

      md_array_unset(test_array, 1, [1]);
      assert_equal(test_array, [[], [20, 30], [40, 50]]);

      md_array_unset(test_array, -1, [-2]);
      assert_equal(test_array, [[], [20, 30], [50]], "с отрицательными индексами");

      md_array_unset(test_array, -1, [1]);
      assert_equal(test_array, [[], [20, 30], []]);

      md_array_unset(test_array, 4, [1]);
      assert_equal(test_array, [[], [20, 30], []], "с выходящими индексами");

      md_array_unset(test_array, -4, [2]);
      assert_equal(test_array, [[], [20, 30], []]);

      md_array_unset(test_array, 2, [4]);
      assert_equal(test_array, [[], [20, 30], []]);

      md_array_unset(test_array, 2, [-4]);
      assert_equal(test_array, [[], [30], []]);
    end;
  end;


  proc test_md_array_is_set(case: UnitTesting.Case);

    var test_array: variant[];

    with case do

      -- то же самое, но для многомерных массивов

      test_array = [
        [00, 10, 20],
        [30, 40    ],
        [60        ] as variant[]
      ];

      md_array_set(test_array, 3, [3], 90);

      assert_false(  md_array_is_set(test_array, 0), "c нулевыми индексами");
      assert_false(  md_array_is_set(test_array, 0, [0]));
      assert_false(  md_array_is_set(test_array, 1, [0]));

      assert_true(   md_array_is_set(test_array, 1), "с положительными индексами");
      assert_true(   md_array_is_set(test_array, 1, [1]));
      assert_true(   md_array_is_set(test_array, 2, [2]));
      assert_true(   md_array_is_set(test_array, 3, [3]));

      assert_false(  md_array_is_set(test_array, -1), "с отсутствующими и выходящими индексами");
      assert_false(  md_array_is_set(test_array, 4));
      assert_false(  md_array_is_set(test_array, -1, [1]));
      assert_false(  md_array_is_set(test_array, 1, [-1]));
      assert_false(  md_array_is_set(test_array, 2, [3]));
      assert_false(  md_array_is_set(test_array, 3, [2]));
    end;
  end;


  proc test_md_array_clear(case: UnitTesting.Case);

    var test_array: variant[];

    with case do

      -- то же самое, но для многомерных массивов

      test_array = [
        [0, 1],
        [2, 3],
        [4, 5],
        [6, 7],
        [8, 9] as variant[]
      ];

      assert_equal(test_array, [[0, 1], [2, 3], [4, 5], [6, 7], [8, 9]]);

      md_array_clear(test_array, [2]);
      assert_equal(test_array, [[0], [2], [4], [6], [8]]);

      md_array_clear(test_array, [1]);
      assert_equal(test_array, [[], [], [], [], []]);

      md_array_clear(test_array);
      assert_equal(test_array, []);


      test_array = [
        [0, 1, 2, 3, 4],
        [5, 6, 7, 8, 9] as variant[]
      ];

      assert_equal(test_array, [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]]);

      md_array_clear(test_array, [5]);
      assert_equal(test_array, [[0, 1, 2, 3], [5, 6, 7, 8]]);

      md_array_clear(test_array, [-5]);
      assert_equal(test_array, [[1, 2, 3], [6, 7, 8]]);

      md_array_clear(test_array);
      assert_equal(test_array, []);
    end;
  end;


  proc test_md_array_pos(case: UnitTesting.Case);

    var test_array: variant[];

    with case do

      -- то же самое, но для многомерных массивов

      test_array = [10, 20, 30, 40, 50];
      assert_equal(md_array_pos(test_array, nil, [40]), 4);

      test_array = [
        [00, 10],
        [20, 30],
        [40, 50],
        [60, 70],
        [80, 90]
      ];

      assert_equal(md_array_pos(test_array, nil, [[00, 10]]), 1);
      assert_equal(md_array_pos(test_array, nil, [[80, 90]]), 5);

      assert_equal(md_array_pos(test_array, nil, [[00, 10], [20, 30]]), 1);
      assert_equal(md_array_pos(test_array, nil, [[60, 70], [80, 90]]), 4);

      assert_equal(md_array_pos(test_array, [1], [00]), 1);
      assert_equal(md_array_pos(test_array, [1], [00, 20]), 1);

      assert_equal(md_array_pos(test_array, nil, [00, 10]), -1);
      assert_equal(md_array_pos(test_array, nil, [00, 10, 20]), -1);
      assert_equal(md_array_pos(test_array, nil, [["00", "20"]]), -1);
    end;
  end;


  proc test_md_array_contains(case: UnitTesting.Case);
    
  end;


  proc test_md_array_sort(case: UnitTesting.Case);
    
  end;


  proc test_md_array_each(case: UnitTesting.Case);


  end;


  proc test_md_array_filter(case: UnitTesting.Case);


  end;


  proc test_md_array_map(case: UnitTesting.Case);


  end;


  proc test_md_array_reduce(case: UnitTesting.Case);


  end;
end