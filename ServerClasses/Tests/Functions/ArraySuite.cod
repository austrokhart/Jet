class inherited UnitTesting.Suite "Набор для тестирования класса для работы с массивами";
import classes Functions.Array;

inclass


  proc test_array_from(case: UnitTesting.Case);

    -- тестируется метод array_from с nil, значениями - не массивами, значениями - массивами
    -- степень покрытия: хорошо

    with case do

      assert_equal(  array_from(nil),                 [], "проверка с nil");

      assert_equal(  array_from(true),                [true], "проверки cо значениями - не массивами");
      assert_equal(  array_from(false),               [false]);
      assert_equal(  array_from(00),                  [00]);
      assert_equal(  array_from(10),                  [10]);
      assert_equal(  array_from(00.0),                [00.0]);
      assert_equal(  array_from(10.0),                [10.0]);
      assert_equal(  array_from("00"),                ["00"]);
      assert_equal(  array_from("10"),                ["10"]);
      assert_equal(  array_from("abcde"),             ["abcde"]);
      assert_equal(  array_from("abcdef"),            ["abcdef"]);
      assert_equal(  array_from(01.07.2018),          [01.07.2018]);
      assert_equal(  array_from(01.07.2018 12:00),    [01.07.2018 12:00]);

      assert_equal(  array_from([]),                  [], "проверки со значениями - массивами");
      assert_equal(  array_from([nil]),               [nil]);
      assert_equal(  array_from([true]),              [true]);
      assert_equal(  array_from([false]),             [false]);
      assert_equal(  array_from([00]),                [00]);
      assert_equal(  array_from([10]),                [10]);
      assert_equal(  array_from([00.0]),              [00.0]);
      assert_equal(  array_from([10.0]),              [10.0]);
      assert_equal(  array_from(["00"]),              ["00"]);
      assert_equal(  array_from(["10"]),              ["10"]);
      assert_equal(  array_from(["abcde"]),           ["abcde"]);
      assert_equal(  array_from(["abcdef"]),          ["abcdef"]);
      assert_equal(  array_from([01.07.2018]),        [01.07.2018]);
      assert_equal(  array_from([01.07.2018 12:00]),  [01.07.2018 12:00]);

      assert_equal(  array_from([[], [], [], [], []]),                                          [[], [], [], [], []]);
      assert_equal(  array_from([nil, nil, nil, nil, nil]),                                     [nil, nil, nil, nil, nil]);
      assert_equal(  array_from([true, true, true, true, true]),                                [true, true, true, true, true]);
      assert_equal(  array_from([10, 20, 30, 40, 50]),                                          [10, 20, 30, 40, 50]);
      assert_equal(  array_from([10.0, 20.0, 30.0, 40.0, 50.0]),                                [10.0, 20.0, 30.0, 40.0, 50.0]);
      assert_equal(  array_from(["abcdef", "ghijk", "lmnopq", "rstuvw", "xyz"]),                ["abcdef", "ghijk", "lmnopq", "rstuvw", "xyz"]);
      assert_equal(  array_from([01.01.2018, 01.01.2019, 01.01.2020, 01.01.2021, 01.01.2022]),  [01.01.2018, 01.01.2019, 01.01.2020, 01.01.2021, 01.01.2022]);

      assert_equal(  array_from([nil, true, false, 00, 10, 00.0, 10.0, "abcde", "abcdef", 01.07.2018, 01.07.2018 12:00]),  [nil, true, false, 00, 10, 00.0, 10.0, "abcde", "abcdef", 01.07.2018, 01.07.2018 12:00]);
    end;
  end;


  proc test_array_length(case: UnitTesting.Case);

    -- тестируется метод array_length c пустым массивом, с непустыми массивами и с массивами, в которые значения записаны динамически
    -- степень покрытия: хорошо

    var test_array: variant[];

    with case do

      test_array = [];
      assert_equal(array_length(test_array), 0, "проверка с пустым массивом");

      test_array = [10];
      assert_equal(array_length(test_array), 1, "проверки с разными массивами");

      test_array = [10, 20];
      assert_equal(array_length(test_array), 2);

      test_array[3] = 30;
      assert_equal(array_length(test_array), 3, "проверки с динамическим добавлением значений");

      test_array[4] = 40;
      test_array[5] = 50;
      assert_equal(array_length(test_array), 5);
    end;
  end;


  proc test_array_has_content(case: UnitTesting.Case);

    -- тестируется метод array_has_content с nil, пустым массивом, непустыми массивами
    -- степень покрытия: хорошо

    with case do

      assert_false(  array_has_content([]));
      assert_false(  array_has_content(nil), "вообще-то это значение не массив, но оно будет приведено к массиву за счёт типов аргументов функции");

      assert_true(   array_has_content([nil]));
      assert_true(   array_has_content([[]]));
      assert_true(   array_has_content([true]));
      assert_true(   array_has_content([false]));
      assert_true(   array_has_content([00]));
      assert_true(   array_has_content([10]));
      assert_true(   array_has_content([00.0]));
      assert_true(   array_has_content([10.0]));
      assert_true(   array_has_content(["00"]));
      assert_true(   array_has_content(["10"]));
      assert_true(   array_has_content(["abcde"]));
      assert_true(   array_has_content(["abcdef"]));
      assert_true(   array_has_content([01.07.2018]));
      assert_true(   array_has_content([01.07.2018 12:00]));
    end;
  end;


  proc test_array_get(case: UnitTesting.Case);

    -- тестируется метод array_get с нулевыми, положительными, отрицательными,
    -- выходящими за пределы массива индексами и с использованием значений по-умолчанию
    -- степень покрытия: хорошо

    var test_array: variant[];

    with case do

      test_array = [10, 20, 30, 40, 50];


      assert_equal(  array_get(test_array, 0),           10,     "проверка с нулевым индексом");

      assert_equal(  array_get(test_array, 1),           10,     "проверки с положительным индексом");
      assert_equal(  array_get(test_array, 5),           50);

      assert_equal(  array_get(test_array, -1),          50,     "проверки с отрицательными индексом");
      assert_equal(  array_get(test_array, -5),          10);

      assert_equal(  array_get(test_array, 6),           nil,    "проверки c выходящим индексом");
      assert_equal(  array_get(test_array, -6),          10,     "стоит обратить внимание, что выйти в обратную сторону невозможно");

      assert_equal(  array_get(test_array, 6, "oops"),   "oops", "проверки со значением по-умолчанию");
      assert_equal(  array_get(test_array, -6, "oops"),  10);
    end;
  end;


  proc test_array_set(case: UnitTesting.Case);

    -- тестируется метод array_set с нулевыми, положительными, отрицательными,
    -- выходящими за пределы массива индексами
    -- степень покрытия: хорошо

    var test_array, temp: variant[];

    with case do

      test_array = [10, 20, 30, 40, 50];


      temp = test_array;
      array_set(temp, 0, 100);
      assert_equal(temp, [100, 20, 30, 40, 50], "с нулевым индексом");


      temp = test_array;
      array_set(temp, 1, 100);
      assert_equal(temp, [100, 20, 30, 40, 50], "с положительными индексами");

      temp = test_array;
      array_set(temp, 2, 200);
      assert_equal(temp, [10, 200, 30, 40, 50]);

      temp = test_array;
      array_set(temp, 5, 500);
      assert_equal(temp, [10, 20, 30, 40, 500]);


      temp = test_array;
      array_set(temp, -1, 500);
      assert_equal(temp, [10, 20, 30, 40, 500], "с отрицательными индексами");

      temp = test_array;
      array_set(temp, -2, 400);
      assert_equal(temp, [10, 20, 30, 400, 50]);

      temp = test_array;
      array_set(temp, -5, 100);
      assert_equal(temp, [100, 20, 30, 40, 50]);


      temp = test_array;
      array_set(temp, -6, 000);
      assert_equal(temp, [000, 20, 30, 40, 50], "с индексами, выходящими за пределы");

      temp = test_array;
      array_set(temp, -7, -100);
      assert_equal(temp, [-100, 20, 30, 40, 50], "с индексами, выходящими за пределы");

      temp = test_array;
      array_set(temp, 6, 600);
      assert_equal(temp, [10, 20, 30, 40, 50, 600]);

      temp = test_array;
      array_set(temp, 7, 700);
      assert_equal(temp, [10, 20, 30, 40, 50, nil, 700], "для массива с разрывом в индексации");
    end;
  end;


  proc test_array_unset(case: UnitTesting.Case);

    -- тестируется метод array_unset с нулевыми, положительными, отрицательными,
    -- выходящими за пределы массива индексами
    -- степень покрытия: хорошо

    var test_array, temp: variant[];

    with case do

      test_array = [10, 20, 30, 40, 50];


      temp = test_array;
      array_unset(temp, 1);
      assert_equal(temp, [20, 30, 40, 50], "с положительными индексами");

      temp = test_array;
      array_unset(temp, 2);
      assert_equal(temp, [10, 30, 40, 50], "с положительными индексами");

      temp = test_array;
      array_unset(temp, 5);
      assert_equal(temp, [10, 20, 30, 40]);


      temp = test_array;
      array_unset(temp, -1);
      assert_equal(temp, [10, 20, 30, 40], "с отрицательными индексами");

      temp = test_array;
      array_unset(temp, -2);
      assert_equal(temp, [10, 20, 30, 50]);

      temp = test_array;
      array_unset(temp, -5);
      assert_equal(temp, [20, 30, 40, 50]);


      temp = test_array;
      array_unset(temp, 6);
      assert_equal(temp, [10, 20, 30, 40, 50], "с выходящими индексами");

      temp = test_array;
      array_unset(temp, 7);
      assert_equal(temp, [10, 20, 30, 40, 50]);

      temp = test_array;
      array_unset(temp, -6);
      assert_equal(temp, [20, 30, 40, 50]);

      temp = test_array;
      array_unset(temp, -7);
      assert_equal(temp, [20, 30, 40, 50]);
    end;
  end;


  proc test_array_is_set(case: UnitTesting.Case);

    -- тестируется метод array_is_set с нулевыми, положительными, отрицательными,
    -- выходящими за пределы массива индексами
    -- степень покрытия: хорошо

    var test_array: variant[];

    with case do

      test_array[1] = 10;
      test_array[4] = 40;
      test_array[5] = 50;


      assert_false(  array_is_set(test_array, -7), "с отрицательными индексами");
      assert_false(  array_is_set(test_array, -6));
      assert_false(  array_is_set(test_array, -5));
      assert_false(  array_is_set(test_array, -4));
      assert_false(  array_is_set(test_array, -3));
      assert_false(  array_is_set(test_array, -2));
      assert_false(  array_is_set(test_array, -1));

      assert_false(  array_is_set(test_array, 0), "с нулём");

      assert_true(   array_is_set(test_array, 1));
      assert_false(  array_is_set(test_array, 2));
      assert_false(  array_is_set(test_array, 3), "с незаданными индексами");
      assert_true(   array_is_set(test_array, 4));
      assert_true(   array_is_set(test_array, 5));
      assert_false(  array_is_set(test_array, 6), "с выходящими индексами");
      assert_false(  array_is_set(test_array, 7));
    end;
  end;


  proc test_array_clear(case: UnitTesting.Case);

    -- тестируется метод array_clear
    -- степень покрытия: хорошо

    var test_array: variant[];

    with case do

      test_array = [10, 20, 30, 40, 50];

      array_clear(test_array);
      assert_equal(test_array, []);
    end;
  end;


  proc test_array_append(case: UnitTesting.Case);

    -- тестируется метод array_append c пустыми массивами, с непустыми массивами и с массивами с разрывами
    -- степень покрытия: хорошо

    var test_array: variant[];

    with case do

      test_array = [];
      array_append(test_array, 10);
      assert_equal(test_array, [10]);

      test_array = [];
      array_append(test_array, 10);
      array_append(test_array, 20);
      array_append(test_array, 30);
      assert_equal(test_array, [10, 20, 30]);


      test_array = [10, 20];
      array_append(test_array, 30);
      array_append(test_array, 40);
      array_append(test_array, 50);
      assert_equal(test_array, [10, 20, 30, 40, 50]);

      test_array = [10, 20, 30, 40];
      array_append(test_array, 50);
      assert_equal(test_array, [10, 20, 30, 40, 50]);


      test_array = [];
      test_array[5] = 50;
      array_append(test_array, 60);
      array_append(test_array, 70);
      assert_equal(test_array, [nil, nil, nil, nil, 50, 60, 70]);
    end;
  end;


  proc test_array_prepend(case: UnitTesting.Case);

    -- тестируется метод array_prepend c пустыми массивами, с непустыми массивами и с массивами с разрывами
    -- степень покрытия: хорошо

    var test_array: variant[];

    with case do

      test_array = [];
      array_prepend(test_array, 10);
      assert_equal(test_array, [10]);

      test_array = [];
      array_prepend(test_array, 10);
      array_prepend(test_array, 20);
      array_prepend(test_array, 30);
      assert_equal(test_array, [30, 20, 10]);

      test_array = [20, 10];
      array_prepend(test_array, 30);
      array_prepend(test_array, 40);
      array_prepend(test_array, 50);
      assert_equal(test_array, [50, 40, 30, 20, 10]);

      test_array = [40, 30, 20, 10];
      array_prepend(test_array, 50);
      assert_equal(test_array, [50, 40, 30, 20, 10]);

      test_array = [];
      test_array[5] = 10;
      array_prepend(test_array, 60);
      array_prepend(test_array, 70);
      assert_equal(test_array, [70, 60, nil, nil, nil, nil, 10], "для массива с разрывом в индексации");
    end;
  end;


  proc test_array_extend(case: UnitTesting.Case);

    -- тестируется метод array_extend c пустыми массивами, с непустыми массивами и с массивами с разрывами
    -- степень покрытия: хорошо

    var test_array: variant[];

    with case do

      test_array = [];
      array_extend(test_array, []);
      assert_equal(test_array, []);

      test_array = [];
      array_extend(test_array, [10]);
      assert_equal(test_array, [10]);

      test_array = [];
      array_extend(test_array, [10]);
      array_extend(test_array, [20]);
      array_extend(test_array, [30]);
      assert_equal(test_array, [10, 20, 30], "не самое эффективное использование данного метода, но такая возможность есть");

      test_array = [];
      array_extend(test_array, [10, 20, 30]);
      assert_equal(test_array, [10, 20, 30]);

      test_array = [10, 20];
      array_extend(test_array, [30, 40, 50]);
      assert_equal(test_array, [10, 20, 30, 40, 50]);

      test_array = [10, 20, 30, 40];
      array_extend(test_array, [50]);
      assert_equal(test_array, [10, 20, 30, 40, 50]);

      test_array = [];
      test_array[5] = 50;
      array_extend(test_array, [60, 70]);
      assert_equal(test_array, [nil, nil, nil, nil, 50, 60, 70], "для массива с разрывом в индексации");
    end;
  end;


  proc test_array_pos(case: UnitTesting.Case);

    -- тестируется метод array_pos с последовательностями разной длины, с отсутствующими последовательностями,
    -- с различным смещением
    -- степень покрытия: хорошо

    var test_array, value: variant[];

    with case do

      test_array = [10, 20, 30, 40, 50];


      assert_equal(  array_pos(test_array, [10]),                  1, "с последовательностями разной длины");
      assert_equal(  array_pos(test_array, [20]),                  2);
      assert_equal(  array_pos(test_array, [50]),                  5);

      assert_equal(  array_pos(test_array, [10, 20]),              1);
      assert_equal(  array_pos(test_array, [20, 30]),              2);
      assert_equal(  array_pos(test_array, [40, 50]),              4);

      assert_equal(  array_pos(test_array, [10, 20, 30]),          1);
      assert_equal(  array_pos(test_array, [20, 30, 40]),          2);
      assert_equal(  array_pos(test_array, [30, 40, 50]),          3);

      assert_equal(  array_pos(test_array, [10, 20, 30, 40]),      1);
      assert_equal(  array_pos(test_array, [20, 30, 40, 50]),      2);

      assert_equal(  array_pos(test_array, [10, 20, 30, 40, 50]),  1);


      assert_equal(  array_pos(test_array, ["xx"]),                      -1, "с отсутствующими последовательностями");
      assert_equal(  array_pos(test_array, [10, "xx"]),                  -1);
      assert_equal(  array_pos(test_array, [10, 20, "xx"]),              -1);
      assert_equal(  array_pos(test_array, [10, 20, 30, 40, "xx"]),      -1);
      assert_equal(  array_pos(test_array, [10, 20, 30, 40, 50, "xx"]),  -1);
      assert_equal(  array_pos(test_array, [20, 30, 40, 50, "xx"]),      -1);
      assert_equal(  array_pos(test_array, [30, 40, 50, "xx"]),          -1);
      assert_equal(  array_pos(test_array, [40, 50, "xx"]),              -1);
      assert_equal(  array_pos(test_array, [50, "xx"]),                  -1);


      assert_equal(  array_pos(test_array, [nil]),         -1, "с последовательностями со значениями разных типов");
      assert_equal(  array_pos(test_array, [true]),        -1);
      assert_equal(  array_pos(test_array, [false]),       -1);
      assert_equal(  array_pos(test_array, [00]),          -1);
      assert_equal(  array_pos(test_array, [100]),         -1);
      assert_equal(  array_pos(test_array, [00.00]),       -1);
      assert_equal(  array_pos(test_array, [100.00]),      -1);
      assert_equal(  array_pos(test_array, ["yy"]),        -1);
      assert_equal(  array_pos(test_array, [01.01.2018]),  -1);
      assert_equal(  array_pos(test_array, [[]]),          -1);


      value = [10];

      assert_equal(  array_pos(test_array, value, -7),  1, "со отрицательным смещением для последовательности [10]");
      assert_equal(  array_pos(test_array, value, -6),  1);
      assert_equal(  array_pos(test_array, value, -5),  1);
      assert_equal(  array_pos(test_array, value, -4),  -1);
      assert_equal(  array_pos(test_array, value, -3),  -1);
      assert_equal(  array_pos(test_array, value, -2),  -1);
      assert_equal(  array_pos(test_array, value, -1),  -1);
      assert_equal(  array_pos(test_array, value, 0),   1, "с нулевым");
      assert_equal(  array_pos(test_array, value, 1),   1, "с положительным");
      assert_equal(  array_pos(test_array, value, 2),   -1);
      assert_equal(  array_pos(test_array, value, 3),   -1);
      assert_equal(  array_pos(test_array, value, 4),   -1);
      assert_equal(  array_pos(test_array, value, 5),   -1);
      assert_equal(  array_pos(test_array, value, 6),   -1);
      assert_equal(  array_pos(test_array, value, 7),   -1);


      value = [20];

      assert_equal(  array_pos(test_array, value, -7),  2, "с отрицательным смещением для последовательности [20]");
      assert_equal(  array_pos(test_array, value, -6),  2);
      assert_equal(  array_pos(test_array, value, -5),  2);
      assert_equal(  array_pos(test_array, value, -4),  2);
      assert_equal(  array_pos(test_array, value, -3),  -1);
      assert_equal(  array_pos(test_array, value, -2),  -1);
      assert_equal(  array_pos(test_array, value, -1),  -1);
      assert_equal(  array_pos(test_array, value, 0),   2, "с нулевым");
      assert_equal(  array_pos(test_array, value, 1),   2, "с положительным");
      assert_equal(  array_pos(test_array, value, 2),   2);
      assert_equal(  array_pos(test_array, value, 3),   -1);
      assert_equal(  array_pos(test_array, value, 4),   -1);
      assert_equal(  array_pos(test_array, value, 5),   -1);
      assert_equal(  array_pos(test_array, value, 6),   -1);
      assert_equal(  array_pos(test_array, value, 7),   -1);


      value = [50];

      assert_equal(  array_pos(test_array, value, -7),  5, "с отрицательным смещением для последовательности [50]");
      assert_equal(  array_pos(test_array, value, -6),  5);
      assert_equal(  array_pos(test_array, value, -5),  5);
      assert_equal(  array_pos(test_array, value, -4),  5);
      assert_equal(  array_pos(test_array, value, -3),  5);
      assert_equal(  array_pos(test_array, value, -2),  5);
      assert_equal(  array_pos(test_array, value, -1),  5);
      assert_equal(  array_pos(test_array, value, 0),   5, "с нулевым");
      assert_equal(  array_pos(test_array, value, 1),   5, "с положительным");
      assert_equal(  array_pos(test_array, value, 2),   5);
      assert_equal(  array_pos(test_array, value, 3),   5);
      assert_equal(  array_pos(test_array, value, 4),   5);
      assert_equal(  array_pos(test_array, value, 5),   5);
      assert_equal(  array_pos(test_array, value, 6),   -1);
      assert_equal(  array_pos(test_array, value, 7),   -1);


      value = [10, 20];

      assert_equal(  array_pos(test_array, value, -7),  1, "с отрицательным смещением для последовательности [10, 20]");
      assert_equal(  array_pos(test_array, value, -6),  1);
      assert_equal(  array_pos(test_array, value, -5),  1);
      assert_equal(  array_pos(test_array, value, -4),  -1);
      assert_equal(  array_pos(test_array, value, -3),  -1);
      assert_equal(  array_pos(test_array, value, -2),  -1);
      assert_equal(  array_pos(test_array, value, -1),  -1);
      assert_equal(  array_pos(test_array, value, 0),   1, "с нулевым");
      assert_equal(  array_pos(test_array, value, 1),   1, "с положительным");
      assert_equal(  array_pos(test_array, value, 2),   -1);
      assert_equal(  array_pos(test_array, value, 3),   -1);
      assert_equal(  array_pos(test_array, value, 4),   -1);
      assert_equal(  array_pos(test_array, value, 5),   -1);
      assert_equal(  array_pos(test_array, value, 6),   -1);
      assert_equal(  array_pos(test_array, value, 7),   -1);


      value = [20, 30];

      assert_equal(  array_pos(test_array, value, -7),  2, "с отрицательным смещением для последовательности [20, 30]");
      assert_equal(  array_pos(test_array, value, -6),  2);
      assert_equal(  array_pos(test_array, value, -5),  2);
      assert_equal(  array_pos(test_array, value, -4),  2);
      assert_equal(  array_pos(test_array, value, -3),  -1);
      assert_equal(  array_pos(test_array, value, -2),  -1);
      assert_equal(  array_pos(test_array, value, -1),  -1);
      assert_equal(  array_pos(test_array, value, 0),   2, "с нулевым");
      assert_equal(  array_pos(test_array, value, 1),   2, "с положительным");
      assert_equal(  array_pos(test_array, value, 2),   2);
      assert_equal(  array_pos(test_array, value, 3),   -1);
      assert_equal(  array_pos(test_array, value, 4),   -1);
      assert_equal(  array_pos(test_array, value, 5),   -1);
      assert_equal(  array_pos(test_array, value, 6),   -1);
      assert_equal(  array_pos(test_array, value, 7),   -1);


      value = [40, 50];

      assert_equal(  array_pos(test_array, value, -7),  4, "с отрицательным смещением для последовательности [40, 50]");
      assert_equal(  array_pos(test_array, value, -6),  4);
      assert_equal(  array_pos(test_array, value, -5),  4);
      assert_equal(  array_pos(test_array, value, -4),  4);
      assert_equal(  array_pos(test_array, value, -3),  4);
      assert_equal(  array_pos(test_array, value, -2),  4);
      assert_equal(  array_pos(test_array, value, -1),  -1);
      assert_equal(  array_pos(test_array, value, 0),   4, "с нулевым");
      assert_equal(  array_pos(test_array, value, 1),   4, "с положительным");
      assert_equal(  array_pos(test_array, value, 2),   4);
      assert_equal(  array_pos(test_array, value, 3),   4);
      assert_equal(  array_pos(test_array, value, 4),   4);
      assert_equal(  array_pos(test_array, value, 5),   -1);
      assert_equal(  array_pos(test_array, value, 6),   -1);
      assert_equal(  array_pos(test_array, value, 7),   -1);
    end;
  end;


  proc test_array_pos_any(case: UnitTesting.Case);

    -- тестируется метод array_pos_any с присутствующими и отсутствующими последовательностями, с отсутствующими последовательностями,
    -- с разным порядком совпадающих последовательностей
    -- степень покрытия: хорошо

    var test_array: variant[];

    with case do

      test_array = [10, 20, 30, 40, 50];


      assert_equal(  array_pos_any(test_array, [[10]]),                    [1, 1], "с присутствующими и отсутствующими последовательностями");
      assert_equal(  array_pos_any(test_array, [[10], ["xx"]]),            [1, 1]);
      assert_equal(  array_pos_any(test_array, [["xx"], [10]]),            [1, 1]);

      assert_equal(  array_pos_any(test_array, [[20]]),                    [2, 1]);
      assert_equal(  array_pos_any(test_array, [[20], ["xx"]]),            [2, 1]);
      assert_equal(  array_pos_any(test_array, [["xx"], [20]]),            [2, 1]);

      assert_equal(  array_pos_any(test_array, [[50]]),                    [5, 1]);
      assert_equal(  array_pos_any(test_array, [[50], ["xx"]]),            [5, 1]);
      assert_equal(  array_pos_any(test_array, [["xx"], [50]]),            [5, 1]);

      assert_equal(  array_pos_any(test_array, [[10, 20]]),                [1, 2]);
      assert_equal(  array_pos_any(test_array, [[10, 20], [10, "xx"]]),    [1, 2]);
      assert_equal(  array_pos_any(test_array, [[10, "xx"], [10, 20]]),    [1, 2]);

      assert_equal(  array_pos_any(test_array, [[20, 30]]),                [2, 2]);
      assert_equal(  array_pos_any(test_array, [[20, 30], [20, "xx"]]),    [2, 2]);
      assert_equal(  array_pos_any(test_array, [[20, "xx"], [20, 30]]),    [2, 2]);

      assert_equal(  array_pos_any(test_array, [[40, 50]]),                [4, 2]);
      assert_equal(  array_pos_any(test_array, [[40, 50], [40, "xx"]]),    [4, 2]);
      assert_equal(  array_pos_any(test_array, [[40, "xx"], [40, 50]]),    [4, 2]);


      assert_equal(  array_pos_any(test_array, [["xx"]]),                                                  [-1, 0], "с отсутствующими последовательностями");
      assert_equal(  array_pos_any(test_array, [[10, "xx"]]),                                              [-1, 0]);
      assert_equal(  array_pos_any(test_array, [[10, 20, "xx"]]),                                          [-1, 0]);
      assert_equal(  array_pos_any(test_array, [[10, 20, 30, 40, "xx"]]),                                  [-1, 0]);
      assert_equal(  array_pos_any(test_array, [[10, 20, 30, 40, 50, "xx"]]),                              [-1, 0]);
      assert_equal(  array_pos_any(test_array, [[20, 30, 40, 50, "xx"]]),                                  [-1, 0]);
      assert_equal(  array_pos_any(test_array, [[30, 40, 50, "xx"]]),                                      [-1, 0]);
      assert_equal(  array_pos_any(test_array, [[40, 50, "xx"]]),                                          [-1, 0]);
      assert_equal(  array_pos_any(test_array, [[50, "xx"]]),                                              [-1, 0]);

      assert_equal(  array_pos_any(test_array, [["xx"], ["yy"]]),                                          [-1, 0]);
      assert_equal(  array_pos_any(test_array, [[10, "xx"], [10, "yy"]]),                                  [-1, 0]);
      assert_equal(  array_pos_any(test_array, [[10, 20, "xx"], [10, 20, "yy"]]),                          [-1, 0]);
      assert_equal(  array_pos_any(test_array, [[10, 20, 30, 40, "xx"], [10, 20, 30, 40, "yy"]]),          [-1, 0]);
      assert_equal(  array_pos_any(test_array, [[10, 20, 30, 40, 50, "xx"], [10, 20, 30, 40, 50, "yy"]]),  [-1, 0]);
      assert_equal(  array_pos_any(test_array, [[20, 30, 40, 50, "xx"], [20, 30, 40, 50, "yy"]]),          [-1, 0]);
      assert_equal(  array_pos_any(test_array, [[30, 40, 50, "xx"], [30, 40, 50, "yy"]]),                  [-1, 0]);
      assert_equal(  array_pos_any(test_array, [[40, 50, "xx"], [40, 50, "yy"]]),                          [-1, 0]);
      assert_equal(  array_pos_any(test_array, [[50, "xx"], [50, "yy"]]),                                  [-1, 0]);


      assert_equal(  array_pos_any(test_array, [[10], [10, 20]]),          [1, 1], "с разным порядком совпадающих последовательностей");
      assert_equal(  array_pos_any(test_array, [[10, 20], [10]]),          [1, 2]);

      assert_equal(  array_pos_any(test_array, [[10, 20], [10, 20, 30]]),  [1, 2]);
      assert_equal(  array_pos_any(test_array, [[10, 20, 30], [10, 20]]),  [1, 3]);
    end;
  end;


  proc test_array_contains(case: UnitTesting.Case);

    -- тестируется метод array_contains
    case.comment("случай успешен, если успешен случай array_pos");
  end;


  proc test_array_contains_any(case: UnitTesting.Case);

    -- тестируется метод array_contains_any
    case.comment("случай успешен, если успешен случай array_pos_any");
  end;


  proc test_array_starts_with(case: UnitTesting.Case);

    -- тестируется метод array_starts_with с соответствующими, несоответствующими началу массива последовательностями
    -- степень покрытия: хорошо

    var test_array: variant[];

    with case do

      test_array = [10, 20, 30, 40, 50];


      assert_true(   array_starts_with(test_array, [10]));
      assert_true(   array_starts_with(test_array, [10, 20]));
      assert_true(   array_starts_with(test_array, [10, 20, 30]));
      assert_true(   array_starts_with(test_array, [10, 20, 30, 40]));
      assert_true(   array_starts_with(test_array, [10, 20, 30, 40, 50]));


      assert_false(  array_starts_with(test_array, [20, 30, 40, 50]), "с несоответствующими началу последовательностями");
      assert_false(  array_starts_with(test_array, [30, 40, 50]));
      assert_false(  array_starts_with(test_array, [40, 50]));
      assert_false(  array_starts_with(test_array, [50]));

      assert_false(  array_starts_with(test_array, ["xx"]));
      assert_false(  array_starts_with(test_array, [10, "xx"]));
      assert_false(  array_starts_with(test_array, [10, 20, "xx"]));
      assert_false(  array_starts_with(test_array, [10, 20, 30, "xx"]));
      assert_false(  array_starts_with(test_array, [10, 20, 30, 40, "xx"]));
      assert_false(  array_starts_with(test_array, [10, 20, 30, 40, 50, "xx"]));


      assert_false(  array_starts_with(test_array, [nil]), "с разными типами данных");
      assert_false(  array_starts_with(test_array, [true]));
      assert_false(  array_starts_with(test_array, [false]));
      assert_false(  array_starts_with(test_array, [00]));
      assert_false(  array_starts_with(test_array, [100]));
      assert_false(  array_starts_with(test_array, [00.00]));
      assert_false(  array_starts_with(test_array, [100.00]));
      assert_false(  array_starts_with(test_array, ["yy"]));
      assert_false(  array_starts_with(test_array, [01.01.2018]));
      assert_false(  array_starts_with(test_array, [[]]));
    end;
  end;


  proc test_array_starts_with_any(case: UnitTesting.Case);

    -- тестируется метод array_starts_with_any с соответствующими и несоответствующими, несоответствующими началу массива последовательностями
    -- степень покрытия: хорошо

    var test_array: variant[];

    with case do

      test_array = [10, 20, 30, 40, 50];


      assert_true(   array_starts_with_any(test_array, [[10]]), "с соответствующими и несоответствующими началу последовательностями");
      assert_true(   array_starts_with_any(test_array, [[10], ["xx"]]));
      assert_true(   array_starts_with_any(test_array, [["xx"], [10]]));

      assert_true(   array_starts_with_any(test_array, [[10, 20]]));
      assert_true(   array_starts_with_any(test_array, [[10, 20], [10, "xx"]]));
      assert_true(   array_starts_with_any(test_array, [[10, "xx"], [10, 20]]));

      assert_true(   array_starts_with_any(test_array, [[10, 20, 30]]));
      assert_true(   array_starts_with_any(test_array, [[10, 20, 30], [10, 20, "xx"]]));
      assert_true(   array_starts_with_any(test_array, [[10, 20, "xx"], [10, 20, 30]]));

      assert_true(   array_starts_with_any(test_array, [[10, 20, 30, 40]]));
      assert_true(   array_starts_with_any(test_array, [[10, 20, 30, 40], [10, 20, 30, "xx"]]));
      assert_true(   array_starts_with_any(test_array, [[10, 20, 30, "xx"], [10, 20, 30, 40]]));

      assert_true(   array_starts_with_any(test_array, [[10, 20, 30, 40, 50]]));
      assert_true(   array_starts_with_any(test_array, [[10, 20, 30, 40, 50], [10, 20, 30, 40, "xx"]]));
      assert_true(   array_starts_with_any(test_array, [[10, 20, 30, 40, "xx"], [10, 20, 30, 40, 50]]));


      assert_false(  array_starts_with_any(test_array, [["xx"]]), "с несоответствующими началу последовательностями");
      assert_false(  array_starts_with_any(test_array, [[10, "xx"]]));
      assert_false(  array_starts_with_any(test_array, [[10, 20, "xx"]]));
      assert_false(  array_starts_with_any(test_array, [[10, 20, 30, "xx"]]));
      assert_false(  array_starts_with_any(test_array, [[10, 20, 30, 40, "xx"]]));
      assert_false(  array_starts_with_any(test_array, [[10, 20, 30, 40, 50, "xx"]]));

      assert_false(  array_starts_with_any(test_array, [["xx"], ["yy"]]));
      assert_false(  array_starts_with_any(test_array, [[10, "xx"], [10, "yy"]]));
      assert_false(  array_starts_with_any(test_array, [[10, 20, "xx"], [10, 20, "yy"]]));
      assert_false(  array_starts_with_any(test_array, [[10, 20, 30, "xx"], [10, 20, 30, "yy"]]));
      assert_false(  array_starts_with_any(test_array, [[10, 20, 30, 40, "xx"], [10, 20, 30, 40, "yy"]]));
      assert_false(  array_starts_with_any(test_array, [[10, 20, 30, 40, 50, "xx"], [10, 20, 30, 40, 50, "yy"]]));
    end;
  end;


  proc test_array_ends_with(case: UnitTesting.Case);

    -- тестируется метод array_starts_with с соответствующими, несоответствующими началу массива последовательностями
    -- степень покрытия: хорошо

    var test_array: variant[];

    with case do

      test_array = [10, 20, 30, 40, 50];


      assert_true(   array_ends_with(test_array, [50]));
      assert_true(   array_ends_with(test_array, [40, 50]));
      assert_true(   array_ends_with(test_array, [30, 40, 50]));
      assert_true(   array_ends_with(test_array, [20, 30, 40, 50]));
      assert_true(   array_ends_with(test_array, [10, 20, 30, 40, 50]));


      assert_false(  array_ends_with(test_array, [10, 20, 30, 40]), "с несоответствующими началу последовательностями");
      assert_false(  array_ends_with(test_array, [10, 20, 30]));
      assert_false(  array_ends_with(test_array, [10, 20]));
      assert_false(  array_ends_with(test_array, [10]));

      assert_false(  array_ends_with(test_array, ["xx"]));
      assert_false(  array_ends_with(test_array, ["xx", 50]));
      assert_false(  array_ends_with(test_array, ["xx", 40, 50]));
      assert_false(  array_ends_with(test_array, ["xx", 30, 40, 50]));
      assert_false(  array_ends_with(test_array, ["xx", 20, 30, 40, 50]));
      assert_false(  array_ends_with(test_array, ["xx", 10, 20, 30, 40, 50]));


      assert_false(  array_ends_with(test_array, [nil]), "с разными типами данных");
      assert_false(  array_ends_with(test_array, [true]));
      assert_false(  array_ends_with(test_array, [false]));
      assert_false(  array_ends_with(test_array, [00]));
      assert_false(  array_ends_with(test_array, [100]));
      assert_false(  array_ends_with(test_array, [00.00]));
      assert_false(  array_ends_with(test_array, [100.00]));
      assert_false(  array_ends_with(test_array, ["yy"]));
      assert_false(  array_ends_with(test_array, [01.01.2018]));
      assert_false(  array_ends_with(test_array, [[]]));
    end;
  end;


  proc test_array_ends_with_any(case: UnitTesting.Case);

    -- тестируется метод array_starts_with_any с соответствующими и несоответствующими, несоответствующими началу массива последовательностями
    -- степень покрытия: хорошо

    var test_array: variant[];

    with case do

      test_array = [10, 20, 30, 40, 50];


      assert_true(   array_ends_with_any(test_array, [[50]]), "с соответствующими и несоответствующими началу последовательностями");
      assert_true(   array_ends_with_any(test_array, [[50], ["xx"]]));
      assert_true(   array_ends_with_any(test_array, [["xx"], [50]]));

      assert_true(   array_ends_with_any(test_array, [[40, 50]]));
      assert_true(   array_ends_with_any(test_array, [[40, 50], ["xx", 50]]));
      assert_true(   array_ends_with_any(test_array, [["xx", 50], [40, 50]]));

      assert_true(   array_ends_with_any(test_array, [[30, 40, 50]]));
      assert_true(   array_ends_with_any(test_array, [[30, 40, 50], ["xx", 40, 50]]));
      assert_true(   array_ends_with_any(test_array, [["xx", 40, 50], [30, 40, 50]]));

      assert_true(   array_ends_with_any(test_array, [[20, 30, 40, 50]]));
      assert_true(   array_ends_with_any(test_array, [[20, 30, 40, 50], ["xx", 30, 40, 50]]));
      assert_true(   array_ends_with_any(test_array, [["xx", 30, 40, 50], [20, 30, 40, 50]]));

      assert_true(   array_ends_with_any(test_array, [[10, 20, 30, 40, 50]]));
      assert_true(   array_ends_with_any(test_array, [[10, 20, 30, 40, 50], ["xx", 20, 30, 40]]));
      assert_true(   array_ends_with_any(test_array, [[10, 20, 30, 40, "xx"], [10, 20, 30, 40, 50]]));


      assert_false(  array_ends_with_any(test_array, [["xx"]]), "с несоответствующими началу последовательностями");
      assert_false(  array_ends_with_any(test_array, [["xx", 50]]));
      assert_false(  array_ends_with_any(test_array, [["xx", 40, 50]]));
      assert_false(  array_ends_with_any(test_array, [["xx", 30, 40, 50]]));
      assert_false(  array_ends_with_any(test_array, [["xx", 20, 30, 40, 50]]));
      assert_false(  array_ends_with_any(test_array, [["xx", 10, 20, 30, 40, 50]]));

      assert_false(  array_ends_with_any(test_array, [["xx"], ["yy"]]));
      assert_false(  array_ends_with_any(test_array, [["xx", 50], ["yy", 50]]));
      assert_false(  array_ends_with_any(test_array, [["xx", 40, 50], ["yy", 40, 50]]));
      assert_false(  array_ends_with_any(test_array, [["xx", 30, 40, 50], ["yy", 30, 40, 50]]));
      assert_false(  array_ends_with_any(test_array, [["xx", 20, 30, 40, 50], ["yy", 20, 30, 40, 50]]));
      assert_false(  array_ends_with_any(test_array, [["xx", 10, 20, 30, 40, 50], ["yy", 10, 20, 30, 40, 50]]));
    end;
  end;


  proc test_array_slice(case: UnitTesting.Case);

    -- тестируется метод array_slice с различным смещением, длиной
    -- степень покрытия: хорошо

    var test_array: variant[];

    with case do

      test_array = [10, 20, 30, 40, 50];


      -- со смещением

      assert_equal(  array_slice(test_array, -7),   [10, 20, 30, 40, 50], "с отрицательным смещением");
      assert_equal(  array_slice(test_array, -6),   [10, 20, 30, 40, 50]);
      assert_equal(  array_slice(test_array, -5),   [10, 20, 30, 40, 50]);
      assert_equal(  array_slice(test_array, -4),   [20, 30, 40, 50]);
      assert_equal(  array_slice(test_array, -3),   [30, 40, 50]);
      assert_equal(  array_slice(test_array, -2),   [40, 50]);
      assert_equal(  array_slice(test_array, -1),   [50]);

      assert_equal(  array_slice(test_array, 0),    [10, 20, 30, 40, 50], "с нулевым смещением");
      assert_equal(  array_slice(test_array, nil),  [10, 20, 30, 40, 50], "с nil смещением");
      assert_equal(  array_slice(test_array),       [10, 20, 30, 40, 50]);

      assert_equal(  array_slice(test_array, 1),    [10, 20, 30, 40, 50], "с положительным смещением");
      assert_equal(  array_slice(test_array, 2),    [20, 30, 40, 50]);
      assert_equal(  array_slice(test_array, 3),    [30, 40, 50]);
      assert_equal(  array_slice(test_array, 4),    [40, 50]);
      assert_equal(  array_slice(test_array, 5),    [50]);
      assert_equal(  array_slice(test_array, 6),    []);
      assert_equal(  array_slice(test_array, 7),    []);


      -- с длиной

      assert_equal(  array_slice(test_array, 1, -7),   [], "с отрицательной длиной");
      assert_equal(  array_slice(test_array, 1, -6),   []);
      assert_equal(  array_slice(test_array, 1, -5),   []);
      assert_equal(  array_slice(test_array, 1, -4),   [10]);
      assert_equal(  array_slice(test_array, 1, -3),   [10, 20]);
      assert_equal(  array_slice(test_array, 1, -2),   [10, 20, 30]);
      assert_equal(  array_slice(test_array, 1, -1),   [10, 20, 30, 40]);

      assert_equal(  array_slice(test_array, 1, 0),    [], "с нулевой длиной");
      assert_equal(  array_slice(test_array, 1, nil),  [10, 20, 30, 40, 50], "с nil длиной");
      assert_equal(  array_slice(test_array, 1),       [10, 20, 30, 40, 50]);

      assert_equal(  array_slice(test_array, 1, 1),    [10], "с положительной длиной");
      assert_equal(  array_slice(test_array, 1, 2),    [10, 20]);
      assert_equal(  array_slice(test_array, 1, 3),    [10, 20, 30]);
      assert_equal(  array_slice(test_array, 1, 4),    [10, 20, 30, 40]);
      assert_equal(  array_slice(test_array, 1, 5),    [10, 20, 30, 40, 50]);
      assert_equal(  array_slice(test_array, 1, 6),    [10, 20, 30, 40, 50]);
      assert_equal(  array_slice(test_array, 1, 7),    [10, 20, 30, 40, 50]);


      -- со смещением и длиной

      assert_equal(  array_slice(test_array, 3, -7),   [], "с отрицательной длиной");
      assert_equal(  array_slice(test_array, 3, -6),   []);
      assert_equal(  array_slice(test_array, 3, -5),   []);
      assert_equal(  array_slice(test_array, 3, -4),   []);
      assert_equal(  array_slice(test_array, 3, -3),   []);
      assert_equal(  array_slice(test_array, 3, -2),   [30]);
      assert_equal(  array_slice(test_array, 3, -1),   [30, 40]);

      assert_equal(  array_slice(test_array, 3, 0),    [], "с нулевой длиной");
      assert_equal(  array_slice(test_array, 3, nil),  [30, 40, 50], "с nil длиной");
      assert_equal(  array_slice(test_array, 3),       [30, 40, 50]);

      assert_equal(  array_slice(test_array, 3, 1),    [30], "с положительной длиной");
      assert_equal(  array_slice(test_array, 3, 2),    [30, 40]);
      assert_equal(  array_slice(test_array, 3, 3),    [30, 40, 50]);
      assert_equal(  array_slice(test_array, 3, 4),    [30, 40, 50]);
      assert_equal(  array_slice(test_array, 3, 5),    [30, 40, 50]);
      assert_equal(  array_slice(test_array, 3, 6),    [30, 40, 50]);
      assert_equal(  array_slice(test_array, 3, 7),    [30, 40, 50]);
    end;
  end;


  proc test_array_splice(case: UnitTesting.Case);

    -- тестируется метод array_splice с массивом для замены: пустым, с одним элементом, со множеством элементов; и различным смещением, длиной
    -- степень покрытия: хорошо

    var test_array, temp, value: variant[];

    with case do

      -- с пустым массивом для замены

      test_array = [10, 20, 30, 40, 50];
      value = [];


      -- со смещением

      temp = test_array;
      assert_equal(array_splice(temp, value, -7),  [10, 20, 30, 40, 50], "с отрицательным смещением");
      assert_equal(temp, []);

      temp = test_array;
      assert_equal(array_splice(temp, value, -6),  [10, 20, 30, 40, 50]);
      assert_equal(temp, []);

      temp = test_array;
      assert_equal(array_splice(temp, value, -5),  [10, 20, 30, 40, 50]);
      assert_equal(temp, []);

      temp = test_array;
      assert_equal(array_splice(temp, value, -4),  [20, 30, 40, 50]);
      assert_equal(temp, [10]);

      temp = test_array;
      assert_equal(array_splice(temp, value, -3),  [30, 40, 50]);
      assert_equal(temp, [10, 20]);

      temp = test_array;
      assert_equal(array_splice(temp, value, -2),  [40, 50]);
      assert_equal(temp, [10, 20, 30]);

      temp = test_array;
      assert_equal(array_splice(temp, value, -1),  [50]);
      assert_equal(temp, [10, 20, 30, 40]);


      temp = test_array;
      assert_equal(array_splice(temp, value, 0),  [10, 20, 30, 40, 50], "с нулевым смещением");
      assert_equal(temp, []);

      temp = test_array;
      assert_equal(array_splice(temp, value, nil),  [10, 20, 30, 40, 50], "со смещением nil");
      assert_equal(temp, []);


      temp = test_array;
      assert_equal(array_splice(temp, value, 1),  [10, 20, 30, 40, 50], "с положительным смещением");
      assert_equal(temp, []);

      temp = test_array;
      assert_equal(array_splice(temp, value, 2),  [20, 30, 40, 50]);
      assert_equal(temp, [10]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3),  [30, 40, 50]);
      assert_equal(temp, [10, 20]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 4),  [40, 50]);
      assert_equal(temp, [10, 20, 30]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 5),  [50]);
      assert_equal(temp, [10, 20, 30, 40]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 6),  []);
      assert_equal(temp, [10, 20, 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 7),  []);
      assert_equal(temp, [10, 20, 30, 40, 50]);


      -- с длиной

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, -7), []);
      assert_equal(temp, [10, 20, 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, -6), []);
      assert_equal(temp, [10, 20, 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, -5), []);
      assert_equal(temp, [10, 20, 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, -4), [10]);
      assert_equal(temp, [20, 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, -3), [10, 20]);
      assert_equal(temp, [30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, -2), [10, 20, 30]);
      assert_equal(temp, [40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, -1), [10, 20, 30, 40]);
      assert_equal(temp, [50]);


      temp = test_array;
      assert_equal(array_splice(temp, value, 1, 0), [], "с нулевой длиной");
      assert_equal(temp, [10, 20, 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, nil), [10, 20, 30, 40, 50], "с длиной nil");
      assert_equal(temp, []);


      temp = test_array;
      assert_equal(array_splice(temp, value, 1, 1), [10]);
      assert_equal(temp, [20, 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, 2), [10, 20]);
      assert_equal(temp, [30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, 3), [10, 20, 30]);
      assert_equal(temp, [40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, 4), [10, 20, 30, 40]);
      assert_equal(temp, [50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, 5), [10, 20, 30, 40, 50]);
      assert_equal(temp, []);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, 6), [10, 20, 30, 40, 50]);
      assert_equal(temp, []);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, 7), [10, 20, 30, 40, 50]);
      assert_equal(temp, []);


      -- со смещением и длиной

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, -7), []);
      assert_equal(temp, [10, 20, 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, -6), []);
      assert_equal(temp, [10, 20, 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, -5), []);
      assert_equal(temp, [10, 20, 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, -4), []);
      assert_equal(temp, [10, 20, 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, -3), []);
      assert_equal(temp, [10, 20, 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, -2), [30]);
      assert_equal(temp, [10, 20, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, -1), [30, 40]);
      assert_equal(temp, [10, 20, 50]);


      temp = test_array;
      assert_equal(array_splice(temp, value, 3, 0), [], "с нулевой длиной");
      assert_equal(temp, [10, 20, 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, nil), [30, 40, 50], "с nil длиной");
      assert_equal(temp, [10, 20]);


      temp = test_array;
      assert_equal(array_splice(temp, value, 3, 1), [30], "с положительной длиной");
      assert_equal(temp, [10, 20, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, 2), [30, 40]);
      assert_equal(temp, [10, 20, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, 3), [30, 40, 50]);
      assert_equal(temp, [10, 20]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, 4), [30, 40, 50]);
      assert_equal(temp, [10, 20]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, 5), [30, 40, 50]);
      assert_equal(temp, [10, 20]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, 6), [30, 40, 50]);
      assert_equal(temp, [10, 20]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, 7), [30, 40, 50]);
      assert_equal(temp, [10, 20]);
    end;


    with case do

      -- с массивом для замены с одним элементом

      test_array = [10, 20, 30, 40, 50];
      value = ["aa"];


      -- со смещением

      temp = test_array;
      assert_equal(array_splice(temp, value, -7),  [10, 20, 30, 40, 50], "с отрицательным смещением");
      assert_equal(temp, ["aa"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, -6),  [10, 20, 30, 40, 50]);
      assert_equal(temp, ["aa"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, -5),  [10, 20, 30, 40, 50]);
      assert_equal(temp, ["aa"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, -4),  [20, 30, 40, 50]);
      assert_equal(temp, [10, "aa"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, -3),  [30, 40, 50]);
      assert_equal(temp, [10, 20, "aa"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, -2),  [40, 50]);
      assert_equal(temp, [10, 20, 30, "aa"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, -1),  [50]);
      assert_equal(temp, [10, 20, 30, 40, "aa"]);


      temp = test_array;
      assert_equal(array_splice(temp, value, 0),  [10, 20, 30, 40, 50], "с нулевым смещением");
      assert_equal(temp, ["aa"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, nil),  [10, 20, 30, 40, 50], "со смещением nil");
      assert_equal(temp, ["aa"]);


      temp = test_array;
      assert_equal(array_splice(temp, value, 1),  [10, 20, 30, 40, 50], "с положительным смещением");
      assert_equal(temp, ["aa"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 2),  [20, 30, 40, 50]);
      assert_equal(temp, [10, "aa"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3),  [30, 40, 50]);
      assert_equal(temp, [10, 20, "aa"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 4),  [40, 50]);
      assert_equal(temp, [10, 20, 30, "aa"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 5),  [50]);
      assert_equal(temp, [10, 20, 30, 40, "aa"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 6),  []);
      assert_equal(temp, [10, 20, 30, 40, 50, "aa"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 7),  []);
      assert_equal(temp, [10, 20, 30, 40, 50, nil, "aa"]);


      -- с длиной

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, -7), []);
      assert_equal(temp, ["aa", 10, 20, 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, -6), []);
      assert_equal(temp, ["aa", 10, 20, 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, -5), []);
      assert_equal(temp, ["aa", 10, 20, 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, -4), [10]);
      assert_equal(temp, ["aa", 20, 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, -3), [10, 20]);
      assert_equal(temp, ["aa", 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, -2), [10, 20, 30]);
      assert_equal(temp, ["aa", 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, -1), [10, 20, 30, 40]);
      assert_equal(temp, ["aa", 50]);


      temp = test_array;
      assert_equal(array_splice(temp, value, 1, 0), [], "с нулевой длиной");
      assert_equal(temp, ["aa", 10, 20, 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, nil), [10, 20, 30, 40, 50], "с длиной nil");
      assert_equal(temp, ["aa"]);


      temp = test_array;
      assert_equal(array_splice(temp, value, 1, 1), [10]);
      assert_equal(temp, ["aa", 20, 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, 2), [10, 20]);
      assert_equal(temp, ["aa", 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, 3), [10, 20, 30]);
      assert_equal(temp, ["aa", 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, 4), [10, 20, 30, 40]);
      assert_equal(temp, ["aa", 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, 5), [10, 20, 30, 40, 50]);
      assert_equal(temp, ["aa"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, 6), [10, 20, 30, 40, 50]);
      assert_equal(temp, ["aa"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, 7), [10, 20, 30, 40, 50]);
      assert_equal(temp, ["aa"]);


      -- со смещением и длиной

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, -7), []);
      assert_equal(temp, [10, 20, "aa", 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, -6), []);
      assert_equal(temp, [10, 20, "aa", 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, -5), []);
      assert_equal(temp, [10, 20, "aa", 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, -4), []);
      assert_equal(temp, [10, 20, "aa", 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, -3), []);
      assert_equal(temp, [10, 20, "aa", 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, -2), [30]);
      assert_equal(temp, [10, 20, "aa", 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, -1), [30, 40]);
      assert_equal(temp, [10, 20, "aa", 50]);


      temp = test_array;
      assert_equal(array_splice(temp, value, 3, 0), [], "с нулевой длиной");
      assert_equal(temp, [10, 20, "aa", 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, nil), [30, 40, 50], "с nil длиной");
      assert_equal(temp, [10, 20, "aa"]);


      temp = test_array;
      assert_equal(array_splice(temp, value, 3, 1), [30], "с положительной длиной");
      assert_equal(temp, [10, 20, "aa", 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, 2), [30, 40]);
      assert_equal(temp, [10, 20, "aa", 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, 3), [30, 40, 50]);
      assert_equal(temp, [10, 20, "aa"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, 4), [30, 40, 50]);
      assert_equal(temp, [10, 20, "aa"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, 5), [30, 40, 50]);
      assert_equal(temp, [10, 20, "aa"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, 6), [30, 40, 50]);
      assert_equal(temp, [10, 20, "aa"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, 7), [30, 40, 50]);
      assert_equal(temp, [10, 20, "aa"]);
    end;


    with case do

      -- с массивом для замены с множеством элементов

      test_array = [10, 20, 30, 40, 50];
      value = ["aa", "bb", "cc"];


      -- со смещением

      temp = test_array;
      assert_equal(array_splice(temp, value, -7),  [10, 20, 30, 40, 50], "с отрицательным смещением");
      assert_equal(temp, ["aa", "bb", "cc"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, -6),  [10, 20, 30, 40, 50]);
      assert_equal(temp, ["aa", "bb", "cc"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, -5),  [10, 20, 30, 40, 50]);
      assert_equal(temp, ["aa", "bb", "cc"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, -4),  [20, 30, 40, 50]);
      assert_equal(temp, [10, "aa", "bb", "cc"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, -3),  [30, 40, 50]);
      assert_equal(temp, [10, 20, "aa", "bb", "cc"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, -2),  [40, 50]);
      assert_equal(temp, [10, 20, 30, "aa", "bb", "cc"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, -1),  [50]);
      assert_equal(temp, [10, 20, 30, 40, "aa", "bb", "cc"]);


      temp = test_array;
      assert_equal(array_splice(temp, value, 0),  [10, 20, 30, 40, 50], "с нулевым смещением");
      assert_equal(temp, ["aa", "bb", "cc"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, nil),  [10, 20, 30, 40, 50], "со смещением nil");
      assert_equal(temp, ["aa", "bb", "cc"]);


      temp = test_array;
      assert_equal(array_splice(temp, value, 1),  [10, 20, 30, 40, 50], "с положительным смещением");
      assert_equal(temp, ["aa", "bb", "cc"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 2),  [20, 30, 40, 50]);
      assert_equal(temp, [10, "aa", "bb", "cc"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3),  [30, 40, 50]);
      assert_equal(temp, [10, 20, "aa", "bb", "cc"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 4),  [40, 50]);
      assert_equal(temp, [10, 20, 30, "aa", "bb", "cc"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 5),  [50]);
      assert_equal(temp, [10, 20, 30, 40, "aa", "bb", "cc"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 6),  []);
      assert_equal(temp, [10, 20, 30, 40, 50, "aa", "bb", "cc"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 7),  []);
      assert_equal(temp, [10, 20, 30, 40, 50, nil, "aa", "bb", "cc"]);


      -- с длиной

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, -7), []);
      assert_equal(temp, ["aa", "bb", "cc", 10, 20, 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, -6), []);
      assert_equal(temp, ["aa", "bb", "cc", 10, 20, 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, -5), []);
      assert_equal(temp, ["aa", "bb", "cc", 10, 20, 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, -4), [10]);
      assert_equal(temp, ["aa", "bb", "cc", 20, 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, -3), [10, 20]);
      assert_equal(temp, ["aa", "bb", "cc", 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, -2), [10, 20, 30]);
      assert_equal(temp, ["aa", "bb", "cc", 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, -1), [10, 20, 30, 40]);
      assert_equal(temp, ["aa", "bb", "cc", 50]);


      temp = test_array;
      assert_equal(array_splice(temp, value, 1, 0), [], "с нулевой длиной");
      assert_equal(temp, ["aa", "bb", "cc", 10, 20, 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, nil), [10, 20, 30, 40, 50], "с длиной nil");
      assert_equal(temp, ["aa", "bb", "cc"]);


      temp = test_array;
      assert_equal(array_splice(temp, value, 1, 1), [10]);
      assert_equal(temp, ["aa", "bb", "cc", 20, 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, 2), [10, 20]);
      assert_equal(temp, ["aa", "bb", "cc", 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, 3), [10, 20, 30]);
      assert_equal(temp, ["aa", "bb", "cc", 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, 4), [10, 20, 30, 40]);
      assert_equal(temp, ["aa", "bb", "cc", 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, 5), [10, 20, 30, 40, 50]);
      assert_equal(temp, ["aa", "bb", "cc"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, 6), [10, 20, 30, 40, 50]);
      assert_equal(temp, ["aa", "bb", "cc"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 1, 7), [10, 20, 30, 40, 50]);
      assert_equal(temp, ["aa", "bb", "cc"]);


      -- со смещением и длиной

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, -7), []);
      assert_equal(temp, [10, 20, "aa", "bb", "cc", 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, -6), []);
      assert_equal(temp, [10, 20, "aa", "bb", "cc", 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, -5), []);
      assert_equal(temp, [10, 20, "aa", "bb", "cc", 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, -4), []);
      assert_equal(temp, [10, 20, "aa", "bb", "cc", 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, -3), []);
      assert_equal(temp, [10, 20, "aa", "bb", "cc", 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, -2), [30]);
      assert_equal(temp, [10, 20, "aa", "bb", "cc", 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, -1), [30, 40]);
      assert_equal(temp, [10, 20, "aa", "bb", "cc", 50]);


      temp = test_array;
      assert_equal(array_splice(temp, value, 3, 0), [], "с нулевой длиной");
      assert_equal(temp, [10, 20, "aa", "bb", "cc", 30, 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, nil), [30, 40, 50], "с nil длиной");
      assert_equal(temp, [10, 20, "aa", "bb", "cc"]);


      temp = test_array;
      assert_equal(array_splice(temp, value, 3, 1), [30], "с положительной длиной");
      assert_equal(temp, [10, 20, "aa", "bb", "cc", 40, 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, 2), [30, 40]);
      assert_equal(temp, [10, 20, "aa", "bb", "cc", 50]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, 3), [30, 40, 50]);
      assert_equal(temp, [10, 20, "aa", "bb", "cc"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, 4), [30, 40, 50]);
      assert_equal(temp, [10, 20, "aa", "bb", "cc"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, 5), [30, 40, 50]);
      assert_equal(temp, [10, 20, "aa", "bb", "cc"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, 6), [30, 40, 50]);
      assert_equal(temp, [10, 20, "aa", "bb", "cc"]);

      temp = test_array;
      assert_equal(array_splice(temp, value, 3, 7), [30, 40, 50]);
      assert_equal(temp, [10, 20, "aa", "bb", "cc"]);
    end;
  end;


  proc test_array_concat(case: UnitTesting.Case);

    -- тестируется метод array_concat с пустыми массивами и nil, данными одного и разных типов
    -- степень покрытия: хорошо

    with case do

      assert_equal(  array_concat([]),                              [], "с пустыми массивами");

      assert_equal(  array_concat([[]]),                            []);
      assert_equal(  array_concat([[[]]]),                          [[]]);

      assert_equal(  array_concat([[], [], []]),                    []);
      assert_equal(  array_concat([[[]], [[]], [[]]]),              [[], [], []]);


      assert_equal(  array_concat(nil),                             [], "с nil");

      assert_equal(  array_concat([nil]),                           []);
      assert_equal(  array_concat([[nil]]),                         [nil]);
      assert_equal(  array_concat([[[nil]]]),                       [[nil]]);

      assert_equal(  array_concat([nil, nil, nil]),                 []);
      assert_equal(  array_concat([[nil], [nil], [nil]]),           [nil, nil, nil]);
      assert_equal(  array_concat([[[nil]], [[nil]], [[nil]]]),     [[nil], [nil], [nil]]);


      assert_equal(  array_concat([10]),                            [10], "с данными одного типа");
      assert_equal(  array_concat([[10]]),                          [10]);
      assert_equal(  array_concat([[[10]]]),                        [[10]]);

      assert_equal(  array_concat([10, 20, 30]),                    [10, 20, 30]);
      assert_equal(  array_concat([[10], [20], [30]]),              [10, 20, 30]);
      assert_equal(  array_concat([[[10]], [[20]], [[30]]]),        [[10], [20], [30]]);


      assert_equal(  array_concat(["10", [20, 30]]),                ["10", 20, 30], "с данными разных типов");
      assert_equal(  array_concat([["10", 20.22] as variant, 30]),  ["10", 20.22, 30]);
      assert_equal(  array_concat([10.01.2018, [20], "30"]),        [10.01.2018, 20, "30"]);
      assert_equal(  array_concat([[[10, 20]], [[30.33]]]),         [[10, 20], [30.33]]);


      assert_equal(  array_concat([nil, [true, false], [10, 20.22, "30"]]),    [true, false, 10, 20.22, "30"], "пример приведения nil к пустому массиву");
      assert_equal(  array_concat([[nil], [true, false], [10, 20.22, "30"]]),  [nil, true, false, 10, 20.22, "30"]);
    end;
  end;


  proc test_array_swap(case: UnitTesting.Case);

    -- тестируется метод array_swap с отрицательными, нулевыми и положительными индексами
    -- степень покрытия: хорошо

    var test_array, temp: variant[];

    with case do

      test_array = [10, 20, 30, 40, 50];


      temp = test_array;
      array_swap(temp, 3, -7);
      assert_equal(temp, [30, 20, 10, 40, 50], "с изменением индекса");

      temp = test_array;
      array_swap(temp, 3, -6);
      assert_equal(temp, [30, 20, 10, 40, 50]);

      temp = test_array;
      array_swap(temp, 3, -5);
      assert_equal(temp, [30, 20, 10, 40, 50]);

      temp = test_array;
      array_swap(temp, 3, -4);
      assert_equal(temp, [10, 30, 20, 40, 50]);

      temp = test_array;
      array_swap(temp, 3, -3);
      assert_equal(temp, [10, 20, 30, 40, 50]);

      temp = test_array;
      array_swap(temp, 3, -2);
      assert_equal(temp, [10, 20, 40, 30, 50]);

      temp = test_array;
      array_swap(temp, 3, -1);
      assert_equal(temp, [10, 20, 50, 40, 30]);

      temp = test_array;
      array_swap(temp, 3, 0);
      assert_equal(temp, [30, 20, 10, 40, 50]);

      temp = test_array;
      array_swap(temp, 3, 1);
      assert_equal(temp, [30, 20, 10, 40, 50]);

      temp = test_array;
      array_swap(temp, 3, 2);
      assert_equal(temp, [10, 30, 20, 40, 50]);

      temp = test_array;
      array_swap(temp, 3, 3);
      assert_equal(temp, [10, 20, 30, 40, 50]);

      temp = test_array;
      array_swap(temp, 3, 4);
      assert_equal(temp, [10, 20, 40, 30, 50]);

      temp = test_array;
      array_swap(temp, 3, 5);
      assert_equal(temp, [10, 20, 50, 40, 30]);

      temp = test_array;
      array_swap(temp, 3, 6);
      assert_equal(temp, [10, 20, nil, 40, 50, 30]);

      temp = test_array;
      array_swap(temp, 3, 7);
      assert_equal(temp, [10, 20, nil, 40, 50, nil, 30]);


      temp = test_array;
      array_swap(temp, -7, 3);
      assert_equal(temp, [30, 20, 10, 40, 50], "с изменением другого индекса");

      temp = test_array;
      array_swap(temp, -6, 3);
      assert_equal(temp, [30, 20, 10, 40, 50]);

      temp = test_array;
      array_swap(temp, -5, 3);
      assert_equal(temp, [30, 20, 10, 40, 50]);

      temp = test_array;
      array_swap(temp, -4, 3);
      assert_equal(temp, [10, 30, 20, 40, 50]);

      temp = test_array;
      array_swap(temp, -3, 3);
      assert_equal(temp, [10, 20, 30, 40, 50]);

      temp = test_array;
      array_swap(temp, -2, 3);
      assert_equal(temp, [10, 20, 40, 30, 50]);

      temp = test_array;
      array_swap(temp, -1, 3);
      assert_equal(temp, [10, 20, 50, 40, 30]);

      temp = test_array;
      array_swap(temp, 0, 3);
      assert_equal(temp, [30, 20, 10, 40, 50]);

      temp = test_array;
      array_swap(temp, 1, 3);
      assert_equal(temp, [30, 20, 10, 40, 50]);

      temp = test_array;
      array_swap(temp, 2, 3);
      assert_equal(temp, [10, 30, 20, 40, 50]);

      temp = test_array;
      array_swap(temp, 3, 3);
      assert_equal(temp, [10, 20, 30, 40, 50]);

      temp = test_array;
      array_swap(temp, 4, 3);
      assert_equal(temp, [10, 20, 40, 30, 50]);

      temp = test_array;
      array_swap(temp, 5, 3);
      assert_equal(temp, [10, 20, 50, 40, 30]);

      temp = test_array;
      array_swap(temp, 6, 3);
      assert_equal(temp, [10, 20, nil, 40, 50, 30]);

      temp = test_array;
      array_swap(temp, 7, 3);
      assert_equal(temp, [10, 20, nil, 40, 50, nil, 30]);
    end;
  end;


  proc test_array_reverse(case: UnitTesting.Case);

    -- тестируется метод array_reverse с массивами с нулевым, нечётным, чётным количеством элементов
    -- степень покрытия: хорошо

    var test_array: variant[];

    with case do

      test_array = [];
      array_reverse(test_array);
      assert_equal(test_array, []);

      test_array = [10];
      array_reverse(test_array);
      assert_equal(test_array, [10]);

      test_array = [10, 20];
      array_reverse(test_array);
      assert_equal(test_array, [20, 10]);

      test_array = [10, 20, 30];
      array_reverse(test_array);
      assert_equal(test_array, [30, 20, 10]);

      test_array = [10, 20, 30, 40];
      array_reverse(test_array);
      assert_equal(test_array, [40, 30, 20, 10]);

      test_array = [10, 20, 30, 40, 50];
      array_reverse(test_array);
      assert_equal(test_array, [50, 40, 30, 20, 10]);

      test_array = [];
      test_array[5] = 50;
      array_reverse(test_array);
      assert_equal(test_array, [50, nil, nil, nil, nil], "для массива с разрывом в индексации");
    end;
  end;


  proc test_array_pad(case: UnitTesting.Case);

    -- тестируется метод array_pad с различным направлением direction,
    -- с пустыми массивами, с массивами с одним, множеством элементов для дополнения, с различной длиной

    var test_array, temp, value: variant[];

    with case do

      -- для направления ARRAY_PAD_LEFT

      -- с пустым массивом
      value = [];


      test_array = [];

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 0);
      assert_equal(temp, [], "для направления ARRAY_PAD_LEFT с пустым массивом");

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 3);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 5);
      assert_equal(temp, []);


      test_array = [30, 20, 10];

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 3);
      assert_equal(temp, [30, 20, 10]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 5);
      assert_equal(temp, [30, 20, 10]);


      test_array = [50, 40, 30, 20, 10];

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 3);
      assert_equal(temp, [30, 20, 10]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 5);
      assert_equal(temp, [50, 40, 30, 20, 10]);


      test_array = [];
      test_array[3] = 10;

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 3);
      assert_equal(temp, [nil, nil, 10]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 5);
      assert_equal(temp, [nil, nil, 10]);


      test_array = [];
      test_array[5] = 10;

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 3);
      assert_equal(temp, [nil, nil, 10]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 5);
      assert_equal(temp, [nil, nil, nil, nil, 10]);


      -- с массивом с одним значением
      value = ["aa"];


      test_array = [];

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 0);
      assert_equal(temp, [], "с массивом с одним значением");

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 3);
      assert_equal(temp, ["aa", "aa", "aa"]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 5);
      assert_equal(temp, ["aa", "aa", "aa", "aa", "aa"]);


      test_array = [30, 20, 10];

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 3);
      assert_equal(temp, [30, 20, 10]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 5);
      assert_equal(temp, ["aa", "aa", 30, 20, 10]);


      test_array = [50, 40, 30, 20, 10];

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 3);
      assert_equal(temp, [30, 20, 10]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 5);
      assert_equal(temp, [50, 40, 30, 20, 10]);


      test_array = [];
      test_array[3] = 10;

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 3);
      assert_equal(temp, [nil, nil, 10]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 5);
      assert_equal(temp, ["aa", "aa", nil, nil, 10]);


      test_array = [];
      test_array[5] = 10;

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 3);
      assert_equal(temp, [nil, nil, 10]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 5);
      assert_equal(temp, [nil, nil, nil, nil, 10]);


      -- с массивом со множеством значений
      value = ["aa", "bb", "cc"];


      test_array = [];

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 0);
      assert_equal(temp, [], "с массивом со множеством значений");

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 3);
      assert_equal(temp, ["aa", "bb", "cc"]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 5);
      assert_equal(temp, ["bb", "cc", "aa", "bb", "cc"]);


      test_array = [30, 20, 10];

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 3);
      assert_equal(temp, [30, 20, 10]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 5);
      assert_equal(temp, ["bb", "cc", 30, 20, 10]);


      test_array = [50, 40, 30, 20, 10];

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 3);
      assert_equal(temp, [30, 20, 10]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 5);
      assert_equal(temp, [50, 40, 30, 20, 10]);


      test_array = [];
      test_array[3] = 10;

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 3);
      assert_equal(temp, [nil, nil, 10]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 5);
      assert_equal(temp, ["bb", "cc", nil, nil, 10]);


      test_array = [];
      test_array[5] = 10;

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 3);
      assert_equal(temp, [nil, nil, 10]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_LEFT, value, 5);
      assert_equal(temp, [nil, nil, nil, nil, 10]);
    end;


    with case do

      -- для направления ARRAY_PAD_RIGHT

      -- с пустым массивом
      value = [];


      test_array = [];

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 0);
      assert_equal(temp, [], "для направления ARRAY_PAD_RIGHT с пустым массивом");

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 3);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 5);
      assert_equal(temp, []);


      test_array = [10, 20, 30];

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 3);
      assert_equal(temp, [10, 20, 30]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 5);
      assert_equal(temp, [10, 20, 30]);


      test_array = [10, 20, 30, 40, 50];

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 3);
      assert_equal(temp, [10, 20, 30]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 5);
      assert_equal(temp, [10, 20, 30, 40, 50]);


      test_array = [];
      test_array[3] = 30;

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 3);
      assert_equal(temp, [nil, nil, 30]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 5);
      assert_equal(temp, [nil, nil, 30]);


      test_array = [];
      test_array[5] = 50;

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 3);
      assert_equal(temp, [nil, nil, nil]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 5);
      assert_equal(temp, [nil, nil, nil, nil, 50]);



      -- с массивом с одним значением
      value = ["aa"];


      test_array = [];

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 0);
      assert_equal(temp, [], "с массивом с одним значением");

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 3);
      assert_equal(temp, ["aa", "aa", "aa"]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 5);
      assert_equal(temp, ["aa", "aa", "aa", "aa", "aa"]);


      test_array = [10, 20, 30];

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 3);
      assert_equal(temp, [10, 20, 30]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 5);
      assert_equal(temp, [10, 20, 30, "aa", "aa"]);


      test_array = [10, 20, 30, 40, 50];

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 3);
      assert_equal(temp, [10, 20, 30]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 5);
      assert_equal(temp, [10, 20, 30, 40, 50]);


      test_array = [];
      test_array[3] = 30;

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 3);
      assert_equal(temp, [nil, nil, 30]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 5);
      assert_equal(temp, [nil, nil, 30, "aa", "aa"]);


      test_array = [];
      test_array[5] = 50;

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 3);
      assert_equal(temp, [nil, nil, nil]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 5);
      assert_equal(temp, [nil, nil, nil, nil, 50]);


      -- с массивом со множеством значением
      value = ["aa", "bb", "cc"];


      test_array = [];

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 0);
      assert_equal(temp, [], "с массивом со множеством значением");

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 3);
      assert_equal(temp, ["aa", "bb", "cc"]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 5);
      assert_equal(temp, ["aa", "bb", "cc", "aa", "bb"]);


      test_array = [10, 20, 30];

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 3);
      assert_equal(temp, [10, 20, 30]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 5);
      assert_equal(temp, [10, 20, 30, "aa", "bb"]);


      test_array = [10, 20, 30, 40, 50];

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 3);
      assert_equal(temp, [10, 20, 30]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 5);
      assert_equal(temp, [10, 20, 30, 40, 50]);


      test_array = [];
      test_array[3] = 30;

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 3);
      assert_equal(temp, [nil, nil, 30]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 5);
      assert_equal(temp, [nil, nil, 30, "aa", "bb"]);


      test_array = [];
      test_array[5] = 50;

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 3);
      assert_equal(temp, [nil, nil, nil]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_RIGHT, value, 5);
      assert_equal(temp, [nil, nil, nil, nil, 50]);

    end;


    with case do

      -- для направления ARRAY_PAD_BOTH

      -- с пустым массивом
      value = [];


      test_array = [];

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 0);
      assert_equal(temp, [], "для направления ARRAY_PAD_BOTH с пустым массивом");

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 3);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 5);
      assert_equal(temp, []);


      test_array = [10, 20, 30];

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 3);
      assert_equal(temp, [10, 20, 30]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 5);
      assert_equal(temp, [10, 20, 30]);


      test_array = [10, 20, 30, 40, 50];

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 3);
      assert_equal(temp, [20, 30, 40]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 5);
      assert_equal(temp, [10, 20, 30, 40, 50]);


      test_array = [];
      test_array[3] = 30;

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 3);
      assert_equal(temp, [nil, nil, 30]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 5);
      assert_equal(temp, [nil, nil, 30]);


      test_array = [];
      test_array[5] = 50;

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 3);
      assert_equal(temp, [nil, nil, nil]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 5);
      assert_equal(temp, [nil, nil, nil, nil, 50]);


      -- с массивом с одним значением
      value = ["aa"];


      test_array = [];

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 0);
      assert_equal(temp, [], "с массивом с одним значением");

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 3);
      assert_equal(temp, ["aa", "aa", "aa"]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 5);
      assert_equal(temp, ["aa", "aa", "aa", "aa", "aa"]);


      test_array = [10, 20, 30];

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 3);
      assert_equal(temp, [10, 20, 30]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 5);
      assert_equal(temp, ["aa", 10, 20, 30, "aa"]);


      test_array = [10, 20, 30, 40, 50];

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 3);
      assert_equal(temp, [20, 30, 40]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 5);
      assert_equal(temp, [10, 20, 30, 40, 50]);


      test_array = [];
      test_array[3] = 30;

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 3);
      assert_equal(temp, [nil, nil, 30]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 5);
      assert_equal(temp, ["aa", nil, nil, 30, "aa"]);


      test_array = [];
      test_array[5] = 50;

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 3);
      assert_equal(temp, [nil, nil, nil]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 5);
      assert_equal(temp, [nil, nil, nil, nil, 50]);


      -- с массивом со множеством значений
      value = ["aa", "bb", "cc"];


      test_array = [];

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 0);
      assert_equal(temp, [], "с массивом со множеством значений");

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 3);
      assert_equal(temp, ["cc", "aa", "bb"]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 5);
      assert_equal(temp, ["bb", "cc", "aa", "bb", "cc"]);


      test_array = [10, 20, 30];

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 3);
      assert_equal(temp, [10, 20, 30]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 5);
      assert_equal(temp, ["cc", 10, 20, 30, "aa"]);


      test_array = [10, 20, 30, 40, 50];

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 3);
      assert_equal(temp, [20, 30, 40]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 5);
      assert_equal(temp, [10, 20, 30, 40, 50]);


      test_array = [];
      test_array[3] = 30;

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 3);
      assert_equal(temp, [nil, nil, 30]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 5);
      assert_equal(temp, ["cc", nil, nil, 30, "aa"]);


      test_array = [];
      test_array[5] = 50;

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 0);
      assert_equal(temp, []);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 3);
      assert_equal(temp, [nil, nil, nil]);

      temp = test_array;
      array_pad(temp, ARRAY_PAD_BOTH, value, 5);
      assert_equal(temp, [nil, nil, nil, nil, 50]);
    end;
  end;


  proc test_array_trim(case: UnitTesting.Case);

    var test_array, temp: variant[];


    with case do

      test_array = [10, 20, 30, 20, 10];


      temp = test_array;
      array_trim(temp, ARRAY_TRIM_LEFT, [10]);
      assert_equal(temp, [20, 30, 20, 10], "с направлением ARRAY_TRIM_LEFT");

      temp = test_array;
      array_trim(temp, ARRAY_TRIM_LEFT, [20]);
      assert_equal(temp, [10, 20, 30, 20, 10]);

      temp = test_array;
      array_trim(temp, ARRAY_TRIM_LEFT, [30]);
      assert_equal(temp, [10, 20, 30, 20, 10]);


      temp = test_array;
      array_trim(temp, ARRAY_TRIM_LEFT, [10, 20]);
      assert_equal(temp, [30, 20, 10]);

      temp = test_array;
      array_trim(temp, ARRAY_TRIM_LEFT, [20, 30]);
      assert_equal(temp, [10, 20, 30, 20, 10]);


      temp = test_array;
      array_trim(temp, ARRAY_TRIM_LEFT, [10, 20, 30]);
      assert_equal(temp, [20, 10]);
    end;


    with case do

      test_array = [10, 20, 30, 20, 10];


      temp = test_array;
      array_trim(temp, ARRAY_TRIM_RIGHT, [10]);
      assert_equal(temp, [10, 20, 30, 20], "с направлением ARRAY_TRIM_RIGHT");

      temp = test_array;
      array_trim(temp, ARRAY_TRIM_RIGHT, [20]);
      assert_equal(temp, [10, 20, 30, 20, 10]);

      temp = test_array;
      array_trim(temp, ARRAY_TRIM_RIGHT, [30]);
      assert_equal(temp, [10, 20, 30, 20, 10]);


      temp = test_array;
      array_trim(temp, ARRAY_TRIM_RIGHT, [20, 10]);
      assert_equal(temp, [10, 20, 30]);

      temp = test_array;
      array_trim(temp, ARRAY_TRIM_RIGHT, [30, 20]);
      assert_equal(temp, [10, 20, 30, 20, 10]);


      temp = test_array;
      array_trim(temp, ARRAY_TRIM_RIGHT, [30, 20, 10]);
      assert_equal(temp, [10, 20]);
    end;


    with case do

      test_array = [10, 20, 30, 20, 10];


      temp = test_array;
      array_trim(temp, ARRAY_TRIM_BOTH, [10]);
      assert_equal(temp, [20, 30, 20], "с направлением ARRAY_TRIM_BOTH");

      temp = test_array;
      array_trim(temp, ARRAY_TRIM_BOTH, [20]);
      assert_equal(temp, [10, 20, 30, 20, 10]);

      temp = test_array;
      array_trim(temp, ARRAY_TRIM_BOTH, [30]);
      assert_equal(temp, [10, 20, 30, 20, 10]);


      temp = test_array;
      array_trim(temp, ARRAY_TRIM_BOTH, [10, 20]);
      assert_equal(temp, [30, 20, 10]);

      temp = test_array;
      array_trim(temp, ARRAY_TRIM_BOTH, [20, 30]);
      assert_equal(temp, [10, 20, 30, 20, 10]);


      temp = test_array;
      array_trim(temp, ARRAY_TRIM_BOTH, [10, 20, 30]);
      assert_equal(temp, [20, 10]);
    end;
  end;


  proc test_array_sort(case: UnitTesting.Case);
    
  end;


  proc test_array_each(case: UnitTesting.Case);

    var each: Methods.Functions.Array.Each;

    with case do

      each = array_each([]);
      assert_false(each.__next);

      each = array_each([10]);

      assert_true(each.__next);
      assert_equal(each.__index, 1);
      assert_equal(each.__item, 10);

      assert_false(each.__next);

      each = array_each([10, 20]);

      assert_true(each.__next);
      assert_equal(each.__index, 1);
      assert_equal(each.__item, 10);

      assert_true(each.__next);
      assert_equal(each.__index, 2);
      assert_equal(each.__item, 20);

      assert_false(each.__next);
    end;
  end;


  proc test_array_filter(case: UnitTesting.Case);

    with array_filter([1, 2, 3, 4, 5]) do
      while __next do __apply(mod(__item, 2) = 1); end;
      case.assert_equal(__result, [1, 3, 5]);
    end;
  end;


  proc test_array_map(case: UnitTesting.Case);

    with array_map([1, 2, 3, 4, 5]) do
      while __next do __apply(__item *__item); end;
      case.assert_equal(__result, [1, 4, 9, 16, 25]);
    end;
  end;


  proc test_array_reduce(case: UnitTesting.Case);

    with array_reduce([1, 2, 3, 4, 5], 0) do
      while __next do __apply(__result +__item); end;
      case.assert_equal(__result, 15);
    end;

    with array_reduce([1, 2, 3, 4, 5], 1) do
      while __next do __apply(__result *__item); end;
      case.assert_equal(__result, 120);
    end;
  end;


  proc test_array_implode(case: UnitTesting.Case);

    with case do

      assert_equal(array_implode([], "&&"), "");
      assert_equal(array_implode([1], "&&"), "1");
      assert_equal(array_implode([1, 2], "&&"), "1&&2");
      assert_equal(array_implode([1, 2, 3], "&&"), "1&&2&&3");
    end;
  end;
end