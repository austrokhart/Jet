class inherited UnitTesting.Suite "Набор для тестирования класса для работы с массивами";
import classes Functions.Array;

inclass


  proc test_array_from(case: UnitTesting.Case);

    with case do

      -- тестируется приведение из nil, не массивов, массивов

      assert_equal(  array_from(nil),              [], "проверка с nil");
      assert_equal(  array_from([]),               [], "проверка с пустым массивом");

      assert_equal(  array_from(0),                [0], "проверки cо значениями - не массивами");
      assert_equal(  array_from("0"),              ["0"]);
      assert_equal(  array_from(false),            [false]);
      assert_equal(  array_from("false"),          ["false"]);

      assert_equal(  array_from([nil]),            [nil], "проверки со значениями - массивами");
      assert_equal(  array_from([1, 2, 3]),        [1, 2, 3]);
      assert_equal(  array_from([-2, -1, false]),  [-2, -1, false]);
    end;
  end;


--  proc test_array_from_iterable(case: UnitTesting.Case);
--
--    var test_list: List;
--
--    with case do
--
--      test_list = List.create;
--      test_list.add(10);
--      test_list.add(20);
--      test_list.add(30);
--
--      assert_equal(array_from_iterable(test_list), [10, 20, 30]);
--
--      test_list.add(40);
--      test_list.add(50);
--
--      assert_equal(array_from_iterable(test_list), [10, 20, 30, 40, 50]);
--
--      test_list.clear;
--
--      assert_equal(array_from_iterable(test_list), []);
--    end;
--  end;


  proc test_array_length(case: UnitTesting.Case);

    var test_array: variant[];

    with case do

      -- тестируется получение длины массива без значений, с разным количеством значений и со значениями, изменёнными динамически

      test_array = [];
      assert_equal(array_length(test_array), 0, "проверка с пустым массивом");

      test_array = [10];
      assert_equal(array_length(test_array), 1, "проверки с разными массивами");

      test_array = [10, 20];
      assert_equal(array_length(test_array), 2);

      test_array[3] = 30;
      assert_equal(array_length(test_array), 3, "проверки с динамическим добавлением значений");

      test_array[4] = 40;
      test_array[5] = 50;
      assert_equal(array_length(test_array), 5);
    end;
  end;


  proc test_array_length_multi(case: UnitTesting.Case);

    var test_array: variant[];

    with case do

      -- те же проверки, но для многомерных массивов

      test_array = [[]];
      assert_equal(array_length(test_array), 1, "с многомерными массивами без значений");

      test_array = [[], []];
      assert_equal(array_length(test_array), 2);
      assert_equal(array_length(test_array[2]), 0, "с указанием подмассива");

      test_array[3] = [];
      assert_equal(array_length(test_array), 3, "с динамическим добавлением значений");
      assert_equal(array_length(test_array[3]), 0);

      test_array[4] = [];
      test_array[5] = [];
      assert_equal(array_length(test_array), 5);


      test_array = [[10]];
      assert_equal(array_length(test_array), 1, "с многомерными массивами со значениями");

      test_array = [[10], [20]];
      assert_equal(array_length(test_array), 2);
      assert_equal(array_length(test_array[2]), 1, "с указанием подмассива");

      test_array[3] = [30];
      assert_equal(array_length(test_array), 3, "с динамическим добавлением значений");
      assert_equal(array_length(test_array[3]), 1);

      test_array[4] = [40];
      test_array[5] = [50];
      assert_equal(array_length(test_array), 5);


      test_array = [[00, 10]];
      assert_equal(array_length(test_array), 1, "с многомерными массивами со множеством значений");

      test_array = [[00, 10], [20, 30]];
      assert_equal(array_length(test_array), 2);
      assert_equal(array_length(test_array[2]), 2, "с указанием подмассива");

      test_array[3] = [40, 50];
      assert_equal(array_length(test_array), 3, "с динамическим добавлением значений");
      assert_equal(array_length(test_array[3]), 2);

      test_array[4] = [60, 70];
      test_array[5] = [80, 90];
      assert_equal(array_length(test_array), 5);
    end;
  end;


  proc test_array_has_content(case: UnitTesting.Case);

    with case do

      -- простая проверка

      assert_false(  array_has_content(nil));
      assert_false(  array_has_content([]));

      assert_true(   array_has_content([nil]));
      assert_true(   array_has_content([10, 20, 30]));
    end;
  end;


  proc test_array_get(case: UnitTesting.Case);

    var test_array: variant[];

    with case do

      -- тестируется получение элементов массива с использованием нулевых, положительных, отрицательных,
      -- выходящих за пределы массива индексов и с использованием значений по-умолчанию

      test_array = [10, 20, 30, 40, 50];

      assert_equal(  array_get(test_array, 0),                10,     "проверка с нулевым индексом");

      assert_equal(  array_get(test_array, 1),                10,     "проверки с положительным индексом");
      assert_equal(  array_get(test_array, 5),                50);

      assert_equal(  array_get(test_array, -1),               50,     "проверки с отрицательными индексом");
      assert_equal(  array_get(test_array, -5),               10);

      assert_equal(  array_get(test_array, 6),                nil,    "проверки c выходящим индексом");
      assert_equal(  array_get(test_array, -6),               10,     "стоит обратить внимание, что выйти в обратную сторону невозможно");

      assert_equal(  array_get(test_array, 6, nil, "oops"),   "oops", "проверки со значением по-умолчанию");
      assert_equal(  array_get(test_array, -6, nil, "oops"),  10);
    end;
  end;


  proc test_array_get_multi(case: UnitTesting.Case);

    var test_array: variant[];

    with case do

      description("те же проверки, но для многомерных массивов");

      test_array = [
        [05, 10],
        [20, 30],
        [40, 50],
        [60, 70],
        [80, 90]
      ];

      assert_equal(  array_get(test_array, 0, [1]),      05,  "проверка с нулевым индексом");

      assert_equal(  array_get(test_array, 1, [1]),      05,  "проверки с положительным индексом");
      assert_equal(  array_get(test_array, 2, [1]),      20);
      assert_equal(  array_get(test_array, 1, [2]),      10);
      assert_equal(  array_get(test_array, 2, [2]),      30);

      assert_equal(  array_get(test_array, -1, [1]),     80,  "проверки с отрицательым индексом");
      assert_equal(  array_get(test_array, -2, [1]),     60);
      assert_equal(  array_get(test_array, -1, [2]),     90);
      assert_equal(  array_get(test_array, -2, [2]),     70);

      assert_equal(  array_get(test_array, 6, [1]),      nil, "проверки с выходящим индексом");
      assert_equal(  array_get(test_array, -6, [1]),     05);

      assert_equal(  array_get(test_array, 6, [1], "oops"),   "oops", "проверки со значением по-умолчанию");
      assert_equal(  array_get(test_array, -6, [1], "oops"),  05);
    end;
  end;


  proc test_array_set(case: UnitTesting.Case);

    var test_array: variant[];

    with case do

      -- тестируется установка элементов массива с использованием нулевых, положительных, отрицательных,
      -- выходящих за пределы массива индексов

      test_array = [10, 20, 30, 40, 50];

      array_set(test_array, 0, 15);
      assert_equal(test_array, [15, 20, 30, 40, 50], "с нулевым индексом");

      array_set(test_array, 1, 20);
      assert_equal(test_array, [20, 20, 30, 40, 50], "с положительными индексами");

      array_set(test_array, 2, 30);
      assert_equal(test_array, [20, 30, 30, 40, 50]);

      array_set(test_array, 5, 60);
      assert_equal(test_array, [20, 30, 30, 40, 60]);

      array_set(test_array, -1, 70);
      assert_equal(test_array, [20, 30, 30, 40, 70], "с отрицательными индексами");

      array_set(test_array, -5, 30);
      assert_equal(test_array, [30, 30, 30, 40, 70]);

      array_set(test_array, -6, 40);
      assert_equal(test_array, [40, 30, 30, 40, 70], "с индексами, выходящими за пределы");

      array_set(test_array, 6, 80);
      assert_equal(test_array, [40, 30, 30, 40, 70, 80]);
    end;
  end;


  proc test_array_set_multi(case: UnitTesting.Case);

    var test_array: variant[];

    with case do

      -- те же проверки, но для многомерных массивов

      test_array = [
        [00, 10],
        [20, 30],
        [40, 50] as variant[]
      ];

      array_set(test_array, 0, 05, [0]);
      assert_equal(test_array, [[05, 10], [20, 30], [40, 50]], "с нулевыми индексами");

      array_set(test_array, 0, 10, [1]);
      assert_equal(test_array, [[10, 10], [20, 30], [40, 50]]);

      array_set(test_array, 1, 15, [0]);
      assert_equal(test_array, [[15, 10], [20, 30], [40, 50]]);


      array_set(test_array, 1, 20, [1]);
      assert_equal(test_array, [[20, 10], [20, 30], [40, 50]], "с положительными индексами");

      array_set(test_array, 1, 20, [2]);
      assert_equal(test_array, [[20, 20], [20, 30], [40, 50]]);

      array_set(test_array, 3, 50, [1]);
      assert_equal(test_array, [[20, 20], [20, 30], [50, 50]]);

      array_set(test_array, 3, 60, [2]);
      assert_equal(test_array, [[20, 20], [20, 30], [50, 60]]);


      array_set(test_array, -1, 60, [1]);
      assert_equal(test_array, [[20, 20], [20, 30], [60, 60]], "с отрицательными индексами");

      array_set(test_array, -1, 70, [2]);
      assert_equal(test_array, [[20, 20], [20, 30], [60, 70]]);

      array_set(test_array, -3, 25, [-1]);
      assert_equal(test_array, [[20, 25], [20, 30], [60, 70]]);

      array_set(test_array, -3, 30, [2]);
      assert_equal(test_array, [[20, 30], [20, 30], [60, 70]]);


      array_set(test_array, 4, 80, [1]);
      assert_equal(test_array, [[20, 30], [20, 30], [60, 70]], "с выходящими индексами");

      array_set(test_array, -4, 40, [2]);
      assert_equal(test_array, [[20, 40], [20, 30], [60, 70]]);

      array_set(test_array, 1, 30, [-3]);
      assert_equal(test_array, [[30, 40], [20, 30], [60, 70]]);

      array_set(test_array, 1, 50, [3]);
      assert_equal(test_array, [[30, 40, 50], [20, 30], [60, 70]]);
    end;
  end;


  proc test_array_unset(case: UnitTesting.Case);

    var test_array: variant[];

    with case do

      -- тестируется разустановка элементов массива с использованием нулевых, положительных, отрицательных,
      -- выходящих за пределы массива индексов

      test_array = [10, 20, 30, 40, 50];

      array_unset(test_array, 5);
      assert_equal(test_array, [10, 20, 30, 40], "с положительными индексами");

      array_unset(test_array, 1);
      assert_equal(test_array, [20, 30, 40]);


      array_unset(test_array, -1);
      assert_equal(test_array, [20, 30], "с отрицательными индексами");

      array_unset(test_array, -2);
      assert_equal(test_array, [30]);


      array_unset(test_array, 2);
      assert_equal(test_array, [30], "с выходящим индексом");

      array_unset(test_array, -2);
      assert_equal(test_array, []);
    end;
  end;


  proc test_array_unset_multi(case: UnitTesting.Case);

    var test_array: variant[];

    with case do

      -- те же проверки, но для многомерных массивов

      test_array = [
        [00, 10],
        [20, 30],
        [40, 50] as variant[]
      ];

      array_unset(test_array, 1, [2]);
      assert_equal(test_array, [[00], [20, 30], [40, 50]], "с положительными индексами");

      array_unset(test_array, 1, [1]);
      assert_equal(test_array, [[], [20, 30], [40, 50]]);

      array_unset(test_array, -1, [-2]);
      assert_equal(test_array, [[], [20, 30], [50]], "с отрицательными индексами");

      array_unset(test_array, -1, [1]);
      assert_equal(test_array, [[], [20, 30], []]);

      array_unset(test_array, 4, [1]);
      assert_equal(test_array, [[], [20, 30], []], "с выходящими индексами");

      array_unset(test_array, -4, [2]);
      assert_equal(test_array, [[], [20, 30], []]);

      array_unset(test_array, 2, [4]);
      assert_equal(test_array, [[], [20, 30], []]);

      array_unset(test_array, 2, [-4]);
      assert_equal(test_array, [[], [30], []]);
    end;
  end;


  proc test_array_is_set(case: UnitTesting.Case);

    var test_array: variant[];

    with case do

      -- тестируется проверка на установленность элементов массива с использованием нулевых, положительных, отрицательных,
      -- выходящих за пределы массива индексов

      test_array[1] = 10;
      test_array[4] = 40;
      test_array[5] = 50;

      assert_false(  array_is_set(test_array, 0), "c нулевым индексом");

      assert_true(   array_is_set(test_array, 1), "с положительными индексами");
      assert_true(   array_is_set(test_array, 5));

      assert_false(  array_is_set(test_array, -1), "с отрицательными индексами");
      assert_false(  array_is_set(test_array, -5));

      assert_false(  array_is_set(test_array, 2), "с отсутствующими и выходящими индексами");
      assert_false(  array_is_set(test_array, 3));
      assert_false(  array_is_set(test_array, 6));
    end;
  end;


  proc test_array_is_set_multi(case: UnitTesting.Case);

    var test_array: variant[];

    with case do

      -- то же самое, но для многомерных массивов

      test_array = [
        [00, 10, 20],
        [30, 40    ],
        [60        ] as variant[]
      ];

      array_set(test_array, 3, 90, [3]);

      assert_false(  array_is_set(test_array, 0), "c нулевыми индексами");
      assert_false(  array_is_set(test_array, 0, [0]));
      assert_false(  array_is_set(test_array, 1, [0]));

      assert_true(   array_is_set(test_array, 1), "с положительными индексами");
      assert_true(   array_is_set(test_array, 1, [1]));
      assert_true(   array_is_set(test_array, 2, [2]));
      assert_true(   array_is_set(test_array, 3, [3]));

      assert_false(  array_is_set(test_array, -1), "с отсутствующими и выходящими индексами");
      assert_false(  array_is_set(test_array, 4));
      assert_false(  array_is_set(test_array, -1, [1]));
      assert_false(  array_is_set(test_array, 1, [-1]));
      assert_false(  array_is_set(test_array, 2, [3]));
      assert_false(  array_is_set(test_array, 3, [2]));
    end;
  end;


  proc test_array_clear(case: UnitTesting.Case);

    var test_array: variant[];

    with case do

      -- простая проверка

      test_array = [1, 2, 3, 4, 5];

      array_clear(test_array);
      assert_equal(test_array, []);
    end;
  end;


  proc test_array_clear_multi(case: UnitTesting.Case);

    var test_array: variant[];

    with case do

      -- то же самое, но для многомерных массивов

      test_array = [
        [0, 1],
        [2, 3],
        [4, 5],
        [6, 7],
        [8, 9] as variant[]
      ];

      assert_equal(test_array, [[0, 1], [2, 3], [4, 5], [6, 7], [8, 9]]);

      array_clear(test_array, [2]);
      assert_equal(test_array, [[0], [2], [4], [6], [8]]);

      array_clear(test_array, [1]);
      assert_equal(test_array, [[], [], [], [], []]);

      array_clear(test_array);
      assert_equal(test_array, []);


      test_array = [
        [0, 1, 2, 3, 4],
        [5, 6, 7, 8, 9] as variant[]
      ];

      assert_equal(test_array, [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]]);

      array_clear(test_array, [5]);
      assert_equal(test_array, [[0, 1, 2, 3], [5, 6, 7, 8]]);

      array_clear(test_array, [-5]);
      assert_equal(test_array, [[1, 2, 3], [6, 7, 8]]);

      array_clear(test_array);
      assert_equal(test_array, []);
    end;
  end;


  proc test_array_append(case: UnitTesting.Case);

    var test_array: variant[];

    with case do

      -- простая проверка

      array_append(test_array, 1);
      assert_equal(test_array, [1]);

      array_append(test_array, 2);
      array_append(test_array, 3);
      assert_equal(test_array, [1, 2, 3]);
    end;
  end;


  proc test_array_prepend(case: UnitTesting.Case);

    var test_array: variant[];

    with case do

      -- простая проверка

      array_prepend(test_array, 1);
      assert_equal(test_array, [1]);

      array_prepend(test_array, 2);
      array_prepend(test_array, 3);
      assert_equal(test_array, [3, 2, 1]);
    end;
  end;


  proc test_array_extend(case: UnitTesting.Case);

    var test_array: variant[];

    with case do

      -- простая проверка

      array_extend(test_array, [1]);
      assert_equal(test_array, [1]);

      array_extend(test_array, [2, 3]);
      assert_equal(test_array, [1, 2, 3]);
    end;
  end;


  proc test_array_pos(case: UnitTesting.Case);

    var test_array: variant[];

    with case do

      -- тестируется поиск вхождения в массив одного, множества, отсутствующих значений

      test_array = [10, 20, 30, 40, 50];

      assert_equal(array_pos(test_array, [10]), [1, 1], "с одним значением");
      assert_equal(array_pos(test_array, [50]), [5, 1]);

      assert_equal(array_pos(test_array, [10, 20]), [1, 2], "со множеством значений");
      assert_equal(array_pos(test_array, [40, 50]), [4, 2]);

      assert_equal(array_pos(test_array, [20, 30, 40]), [2, 3]);
      assert_equal(array_pos(test_array, [10, 20, 30, 40, 50]), [1, 5]);

      assert_equal(array_pos(test_array, [00]), [-1, 0], "с отсутсвующими значениями");

      assert_equal(array_pos(test_array, [40, 30, 20]), [-1, 0], "со множеством отсутствующих значений");
      assert_equal(array_pos(test_array, ["20", "30", "40"]), [-1, 0]);
    end;
  end;


  proc test_array_pos_multi(case: UnitTesting.Case);

    var test_array: variant[];

    with case do

      -- то же самое, но для многомерных массивов

      test_array = [10, 20, 30, 40, 50];
      assert_equal(array_pos(test_array, [40]), [4, 1]);

      test_array = [
        [00, 10],
        [20, 30],
        [40, 50],
        [60, 70],
        [80, 90]
      ];

      assert_equal(array_pos(test_array, [[00, 10]]), [1, 1]);
      assert_equal(array_pos(test_array, [[80, 90]]), [5, 1]);

      assert_equal(array_pos(test_array, [[00, 10], [20, 30]]), [1, 2]);
      assert_equal(array_pos(test_array, [[60, 70], [80, 90]]), [4, 2]);

      assert_equal(array_pos(test_array, [00], [1]), [1, 1]);
      assert_equal(array_pos(test_array, [00, 20], [1]), [1, 2]);

      assert_equal(array_pos(test_array, [00, 10]), [-1, 0]);
      assert_equal(array_pos(test_array, [00, 10, 20]), [-1, 0]);
      assert_equal(array_pos(test_array, [["00", "20"]]), [-1, 0]);
    end;
  end;


  proc test_array_contains(case: UnitTesting.Case);
    
  end;


  proc test_array_slice(case: UnitTesting.Case);

    var test_array: variant[];
        test_array = [1, 2, 3, 4, 5];

    with case do

      -- без указания начала и длины
      assert_equal(array_slice(test_array, nil), [1, 2, 3, 4, 5]);

      -- без указания длины
      assert_equal(array_slice(test_array, 1), [1, 2, 3, 4, 5]);
      assert_equal(array_slice(test_array, 2), [2, 3, 4, 5]);
      assert_equal(array_slice(test_array, 5), [5]);

      -- без указания начала
      assert_equal(array_slice(test_array, , 0), []);
      assert_equal(array_slice(test_array, , 1), [1]);
      assert_equal(array_slice(test_array, , 5), [1, 2, 3, 4, 5]);

      -- с указанием начала и длины
      assert_equal(array_slice(test_array, 1, 1), [1]);
      assert_equal(array_slice(test_array, 5, 1), [5]);
      assert_equal(array_slice(test_array, 1, 5), [1, 2, 3, 4, 5]);

      -- с отрицательным началом
      assert_equal(array_slice(test_array, -1), [5]);
      assert_equal(array_slice(test_array, -5), [1, 2, 3, 4, 5]);
      assert_equal(array_slice(test_array, -1, 1), [5]);
      assert_equal(array_slice(test_array, -5, 1), [1]);
      assert_equal(array_slice(test_array, -5, 5), [1, 2, 3, 4, 5]);

      -- с отрицательной длиной
      assert_equal(array_slice(test_array, 1, -1), [1, 2, 3, 4]);
      assert_equal(array_slice(test_array, 1, -2), [1, 2, 3]);
      assert_equal(array_slice(test_array, 1, -5), []);

      -- с отрицательными началом и длиной
      assert_equal(array_slice(test_array, -4, -1), [2, 3, 4]);
      assert_equal(array_slice(test_array, -3, -2), [3]);

      -- с выходом за пределы начала
      assert_equal(array_slice(test_array, 6), nil);
      assert_equal(array_slice(test_array, 7), []);
      assert_equal(array_slice(test_array, -6), [1, 2, 3, 4, 5]);
      assert_equal(array_slice(test_array, -7), [1, 2, 3, 4, 5]);

      -- с выходом за пределы длины
      assert_equal(array_slice(test_array, 1, 6), [1, 2, 3, 4, 5]);
      assert_equal(array_slice(test_array, 1, 7), [1, 2, 3, 4, 5]);
      assert_equal(array_slice(test_array, 1, -6), []);
      assert_equal(array_slice(test_array, 1, -7), []);

      -- с выходом за пределы начала и длины
      assert_equal(array_slice(test_array, -3, -3), nil);
    end;
  end;


  proc test_array_splice(case: UnitTesting.Case);
    
  end;


  proc test_array_concat(case: UnitTesting.Case);
    
  end;


  proc test_array_swap(case: UnitTesting.Case);

    var test_array: variant[];

    with case do

      test_array = [1, 2, 3, 4, 5];

      array_swap(test_array, 1, 5);
      assert_equal(test_array, [5, 2, 3, 4, 1]);

      array_swap(test_array, 1, 2);
      assert_equal(test_array, [2, 5, 3, 4, 1]);

      array_swap(test_array, 2, 3);
      assert_equal(test_array, [2, 3, 5, 4, 1]);
    end;
  end;


  proc test_array_reverse(case: UnitTesting.Case);

    var test_array: variant[];

    with case do

      test_array = []; array_reverse(test_array);
      assert_equal(test_array, []);

      test_array = [1, 2, 3]; array_reverse(test_array);
      assert_equal(test_array, [3, 2, 1]);

      test_array = [1, 2, 3, 4, 5]; array_reverse(test_array);
      assert_equal(test_array, [5, 4, 3, 2, 1]);
    end;
  end;


  proc test_array_pad(case: UnitTesting.Case);

    var test_array: variant[];

    with case do

      test_array = [1, 2, 3];

      array_pad(test_array, ARRAY_PAD_LEFT, ["a", "b", "c", "d"], 6);
      assert_equal(test_array, ["b", "c", "d", 1, 2, 3]);

      array_pad(test_array, ARRAY_PAD_RIGHT, ["a", "b", "c", "d"], 8);
      assert_equal(test_array, ["b", "c", "d", 1, 2, 3, "a", "b"]);
    end;
  end;


  proc test_array_sort(case: UnitTesting.Case);
    
  end;


  proc test_array_each(case: UnitTesting.Case);

    var each: Methods.Functions.Array.Each;

    with case do

      each = array_each([]);
      assert_false(each.__next);

      each = array_each([10]);

      assert_true(each.__next);
      assert_equal(each.__index, 1);
      assert_equal(each.__item, 10);

      assert_false(each.__next);

      each = array_each([10, 20]);

      assert_true(each.__next);
      assert_equal(each.__index, 1);
      assert_equal(each.__item, 10);

      assert_true(each.__next);
      assert_equal(each.__index, 2);
      assert_equal(each.__item, 20);

      assert_false(each.__next);
    end;
  end;


  proc test_array_filter(case: UnitTesting.Case);

    with array_filter([1, 2, 3, 4, 5]) do
      while __next do __apply(mod(__item, 2) = 1); end;
      case.assert_equal(__result, [1, 3, 5]);
    end;
  end;


  proc test_array_map(case: UnitTesting.Case);

    with array_map([1, 2, 3, 4, 5]) do
      while __next do __apply(__item *__item); end;
      case.assert_equal(__result, [1, 4, 9, 16, 25]);
    end;
  end;


  proc test_array_reduce(case: UnitTesting.Case);

    with array_reduce([1, 2, 3, 4, 5], 0) do
      while __next do __apply(__result +__item); end;
      case.assert_equal(__result, 15);
    end;

    with array_reduce([1, 2, 3, 4, 5], 1) do
      while __next do __apply(__result *__item); end;
      case.assert_equal(__result, 120);
    end;
  end;


  proc test_array_implode(case: UnitTesting.Case);

    with case do

      assert_equal(array_implode([], "&&"), "");
      assert_equal(array_implode([1], "&&"), "1");
      assert_equal(array_implode([1, 2], "&&"), "1&&2");
      assert_equal(array_implode([1, 2, 3], "&&"), "1&&2&&3");
    end;
  end;
end