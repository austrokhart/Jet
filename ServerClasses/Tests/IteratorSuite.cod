class "Набор для тестирования класса Iterator";

inclass


  proc test_direct_order(case: UnitTesting.Case);

    with case do

      with Iterator.new(1, 5) do

        assert_true(__next);
        assert_equal(__index, 1);

        assert_true(__next);
        assert_equal(__index, 2);

        assert_true(__next);
        assert_equal(__index, 3);

        assert_true(__next);
        assert_equal(__index, 4);

        assert_true(__next);
        assert_equal(__index, 5);

        assert_false(__next);
      end;

      with Iterator.new(5, 1, 1) do

        assert_false(__next);
      end;
    end;
  end;


  proc test_reverse_order(case: UnitTesting.Case);

    with case do

      with Iterator.new(1, 5) do

        __to_end;

        assert_true(__previous);
        assert_equal(__index, 5);

        assert_true(__previous);
        assert_equal(__index, 4);

        assert_true(__previous);
        assert_equal(__index, 3);

        assert_true(__previous);
        assert_equal(__index, 2);

        assert_true(__previous);
        assert_equal(__index, 1);

        assert_false(__previous);
      end;

      with Iterator.new(5, 1, 1) do

        __to_end;
        assert_false(__previous);
      end;
    end;
  end;


  proc test_direct_order_loop(case: UnitTesting.Case);

    with case do

      with Iterator.new(1, 5) do

        assert_true(__next_loop);
        assert_equal(__index, 1);

        assert_true(__next_loop);
        assert_equal(__index, 2);

        assert_true(__next_loop);
        assert_equal(__index, 3);

        assert_true(__next_loop);
        assert_equal(__index, 4);

        assert_true(__next_loop);
        assert_equal(__index, 5);

        assert_true(__next_loop);
        assert_equal(__index, 1);

        assert_true(__next_loop);
        assert_equal(__index, 2);

        assert_true(__next_loop);
        assert_equal(__index, 3);

        assert_true(__next_loop);
        assert_equal(__index, 4);

        assert_true(__next_loop);
        assert_equal(__index, 5);

        assert_true(__next_loop);
        assert_equal(__index, 1);
      end;

      with Iterator.new(5, 1, 1) do

        assert_false(__next_loop);
      end;
    end;
  end;


  proc test_reverse_order_loop(case: UnitTesting.Case);

    with case do

      with Iterator.new(1, 5) do

        assert_true(__previous_loop);
        assert_equal(__index, 5);

        assert_true(__previous_loop);
        assert_equal(__index, 4);

        assert_true(__previous_loop);
        assert_equal(__index, 3);

        assert_true(__previous_loop);
        assert_equal(__index, 2);

        assert_true(__previous_loop);
        assert_equal(__index, 1);

        assert_true(__previous_loop);
        assert_equal(__index, 5);

        assert_true(__previous_loop);
        assert_equal(__index, 4);

        assert_true(__previous_loop);
        assert_equal(__index, 3);

        assert_true(__previous_loop);
        assert_equal(__index, 2);

        assert_true(__previous_loop);
        assert_equal(__index, 1);

        assert_true(__previous_loop);
        assert_equal(__index, 5);
      end;

      with Iterator.new(5, 1, 1) do

        assert_false(__previous_loop);
      end;
    end;
  end;


  proc test_direct_order_negative_step(case: UnitTesting.Case);

    with case do

      with Iterator.new(5, 1, -1) do

        assert_true(__next);
        assert_equal(__index, 5);

        assert_true(__next);
        assert_equal(__index, 4);

        assert_true(__next);
        assert_equal(__index, 3);

        assert_true(__next);
        assert_equal(__index, 2);

        assert_true(__next);
        assert_equal(__index, 1);

        assert_false(__next);
      end;

      with Iterator.new(1, 5, -1) do

        assert_false(__next);
      end;
    end;
  end;


  proc test_reverse_order_negative_step(case: UnitTesting.Case);

    with case do

      with Iterator.new(5, 1, -1) do

        __to_end;

        assert_true(__previous);
        assert_equal(__index, 1);

        assert_true(__previous);
        assert_equal(__index, 2);

        assert_true(__previous);
        assert_equal(__index, 3);

        assert_true(__previous);
        assert_equal(__index, 4);

        assert_true(__previous);
        assert_equal(__index, 5);

        assert_false(__previous);
      end;

      with Iterator.new(1, 5, -1) do

        __to_end;
        assert_false(__previous);
      end;
    end;
  end;


  proc test_direct_order_loop_negative_step(case: UnitTesting.Case);

    with case do

      with Iterator.new(5, 1, -1) do

        assert_true(__next_loop);
        assert_equal(__index, 5);

        assert_true(__next_loop);
        assert_equal(__index, 4);

        assert_true(__next_loop);
        assert_equal(__index, 3);

        assert_true(__next_loop);
        assert_equal(__index, 2);

        assert_true(__next_loop);
        assert_equal(__index, 1);

        assert_true(__next_loop);
        assert_equal(__index, 5);

        assert_true(__next_loop);
        assert_equal(__index, 4);

        assert_true(__next_loop);
        assert_equal(__index, 3);

        assert_true(__next_loop);
        assert_equal(__index, 2);

        assert_true(__next_loop);
        assert_equal(__index, 1);

        assert_true(__next_loop);
        assert_equal(__index, 5);
      end;

      with Iterator.new(1, 5, -1) do

        assert_false(__next_loop);
      end;
    end;
  end;


  proc test_reverse_order_loop_negative_step(case: UnitTesting.Case);

    with case do

      with Iterator.new(5, 1, -1) do

        assert_true(__previous_loop);
        assert_equal(__index, 1);

        assert_true(__previous_loop);
        assert_equal(__index, 2);

        assert_true(__previous_loop);
        assert_equal(__index, 3);

        assert_true(__previous_loop);
        assert_equal(__index, 4);

        assert_true(__previous_loop);
        assert_equal(__index, 5);

        assert_true(__previous_loop);
        assert_equal(__index, 1);

        assert_true(__previous_loop);
        assert_equal(__index, 2);

        assert_true(__previous_loop);
        assert_equal(__index, 3);

        assert_true(__previous_loop);
        assert_equal(__index, 4);

        assert_true(__previous_loop);
        assert_equal(__index, 5);

        assert_true(__previous_loop);
        assert_equal(__index, 1);
      end;

      with Iterator.new(1, 5, -1) do

        assert_false(__previous_loop);
      end;
    end;
  end;
end