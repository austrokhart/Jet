class inherited UnitTesting.Suite "Набор для тестирования класса для работы с экранированием";
import classes Functions.Escaping;

inclass


  proc test_seq_is_escaping(case: UnitTesting.Case);

    var test_string: string;

    with case do

      test_string = '"';
      assert_false(  seq_is_escaping(test_string, 1)  );

      test_string = '\"';
      assert_true (  seq_is_escaping(test_string, 1)  );
      assert_false(  seq_is_escaping(test_string, 2)  );

      test_string = '\\"';
      assert_true (  seq_is_escaping(test_string, 1)  );
      assert_true (  seq_is_escaping(test_string, 2)  );
      assert_false(  seq_is_escaping(test_string, 3)  );

      test_string = '\\\"';
      assert_true (  seq_is_escaping(test_string, 1)  );
      assert_true (  seq_is_escaping(test_string, 2)  );
      assert_true (  seq_is_escaping(test_string, 3)  );
      assert_false(  seq_is_escaping(test_string, 4)  );

      test_string = '\\\\"';
      assert_true (  seq_is_escaping(test_string, 1)  );
      assert_true (  seq_is_escaping(test_string, 2)  );
      assert_true (  seq_is_escaping(test_string, 3)  );
      assert_true (  seq_is_escaping(test_string, 4)  );
      assert_false(  seq_is_escaping(test_string, 5)  );

      test_string = '\/\t';
      assert_true (  seq_is_escaping(test_string, 1)  );
      assert_false(  seq_is_escaping(test_string, 2)  );
      assert_false(  seq_is_escaping(test_string, 3)  );
      assert_false(  seq_is_escaping(test_string, 4)  );
    end;
  end;


  proc test_seq_is_escaped(case: UnitTesting.Case);

    var test_string: string;

    with case do

      test_string = '"';
      assert_false(  seq_is_escaped(test_string, 1)  );

      test_string = '\"';
      assert_false(  seq_is_escaped(test_string, 1)  );
      assert_true (  seq_is_escaped(test_string, 2)  );

      test_string = '\\"';
      assert_false(  seq_is_escaped(test_string, 1)  );
      assert_true (  seq_is_escaped(test_string, 2)  );
      assert_false(  seq_is_escaped(test_string, 3)  );

      test_string = '\\\"';
      assert_false(  seq_is_escaped(test_string, 1)  );
      assert_true (  seq_is_escaped(test_string, 2)  );
      assert_false(  seq_is_escaped(test_string, 3)  );
      assert_true (  seq_is_escaped(test_string, 4)  );

      test_string = '\\\\"';
      assert_false(  seq_is_escaped(test_string, 1)  );
      assert_true (  seq_is_escaped(test_string, 2)  );
      assert_false(  seq_is_escaped(test_string, 3)  );
      assert_true (  seq_is_escaped(test_string, 4)  );
      assert_false(  seq_is_escaped(test_string, 5)  );

      test_string = '\/\t';
      assert_false(  seq_is_escaped(test_string, 1)  );
      assert_true (  seq_is_escaped(test_string, 2)  );
      assert_false(  seq_is_escaped(test_string, 3)  );
      assert_false(  seq_is_escaped(test_string, 4)  );
    end;
  end;


  proc test_str_escape(case: UnitTesting.Case);

    with case do

      assert_equal(  str_escape('"',     ['"']),  '\"'      );
      assert_equal(  str_escape('\"',    ['"']),  '\"'      );
      assert_equal(  str_escape('\\"',   ['"']),  '\\\"'    );
      assert_equal(  str_escape('\\\"',  ['"']),  '\\\"'    );
      assert_equal(  str_escape('\\\\"', ['"']),  '\\\\\"'  );

      assert_equal(  str_escape('"test_string"',   ['"']),       '\"test_string\"'      );
      assert_equal(  str_escape('""test_string""', ['"']),       '\"\"test_string\"\"'  );
      assert_equal(  str_escape('\"test_string\"', ['"']),       '\"test_string\"'      );
      assert_equal(  str_escape('\"test_string\"', ['"']),       '\"test_string\"'      );
      assert_equal(  str_escape('/"test_string/"', ['"', '/']),  '\/\"test_string\/\"'  );

      assert_equal(  str_escape('\\\"test_string\\\"',    ['"', '/']),        '\\\"test_string\\\"'             );
      assert_equal(  str_escape('\t\t /"test_string/"//', ['"', '/', '\t']),  '\\t\\t \/\"test_string\/\"\/\/'  );
    end;
  end;


  proc test_str_unescape(case: UnitTesting.Case);

    with case do

      assert_equal(  str_unescape('"',     ['"']),  '"'    );
      assert_equal(  str_unescape('\"',    ['"']),  '"'    );
      assert_equal(  str_unescape('\\"',   ['"']),  '\"'   );
      assert_equal(  str_unescape('\\\"',  ['"']),  '\"'   );
      assert_equal(  str_unescape('\\\\"', ['"']),  '\\"'  );

      assert_equal(  str_unescape('\"test_string\"',     ['"']),       '"test_string"'    );
      assert_equal(  str_unescape('\"\"test_string\"\"', ['"']),       '""test_string""'  );
      assert_equal(  str_unescape('\/\"test_string\/\"', ['"', '/']),  '/"test_string/"'  );
      assert_equal(  str_unescape('\\\"test_string\\\"', ['"', '\']),  '\"test_string\"'  );

      assert_equal(  str_unescape('\\foo \"bar'),                      '\foo "bar', '\f является специальной последовательностью');

      assert_equal(  str_unescape('\\t\\t \/\"test_string\/\"\/\/', ['"', '/']),         '\\t\\t /"test_string/"//'  );
      assert_equal(  str_unescape('\\t\\t \\/\"test_string\/\"\\/\/', ['"', '/', '\']),  '\\t\\t \/"test_string/"\//'  );
      assert_equal(  str_unescape('\\t\\t \/\"test_string\/\"\/\/', ['"', '\t']),        '\t\t \/"test_string\/"\/\/'  );
      assert_equal(  str_unescape('\\t\\t \/\"test_string\/\"\/\/', ['"', '/', '\t']),   '\t\t /"test_string/"//'  );


    end;
  end;
end