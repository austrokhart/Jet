class "Класс для экранирования строк";
import classes Functions.Array, Functions.String;

inclass


  var ESCAPE_CHAR:  string = '\';
  var QUOTE_CHAR:   string = '"';
  var UNICODE_CHAR: string = '\u';

  var BASIC_CHARS: string[] = ['"', '\'];
  var OTHER_CHARS: string[] = ['/', '\b', '\f', '\n', '\r', '\t'];


  func new(handling_chars: string[] = other_chars; handle_unicode: boolean = true): StringEscaper;

    result = self.create;
    result.handling_chars = handling_chars;
    result.handle_unicode(handle_unicode);

    return result;
  end;


  func char_is_escaping(str: string; index: integer = 1): boolean;
    
    return str_starts_with(str, self.ESCAPE_CHAR, index)
           and not self.char_is_unicode(str, index)
           and not str_starts_with_any(str, self.OTHER_CHARS, index);
  end;


  func char_is_escaped(str: string; index: integer = 1): boolean;

    var i: integer;

    if str_starts_with_any(str, array_concat([self.OTHER_CHARS, self.BASIC_CHARS]), index)
       or self.char_is_unicode(str, index)
    then

      i = 1;
      while str_is_set(str, index -i) and str_char_at(str, index -i) = self.ESCAPE_CHAR do i = i +1; end;

      return mod(i -1, 2) = 1;
    else
      return false;
    end;
  end;


  func char_is_unicode(str: string; index: integer = 1): boolean;

    var i: integer;

    if str_starts_with(str, self.UNICODE_CHAR, index) then

      for i = 1..4 do
        if str_pos('0123456789abcdef', str_char_at(str, index +2 +i -1)) = -1 then return false; end;
      end;
      
      return true;
    else
      return false;
    end;
  end;

inobject


  var handling_chars: string[];

  var mode_handle_unicode: boolean;
  var mode_escape_once: boolean;


  func handle_unicode(state: boolean): StringEscaper;

    self.mode_handle_unicode = state;
    return self;
  end;


  func escape_once(state: boolean): StringEscaper;

    self.mode_escape_once = state;
    return self;
  end;


  func escape(str: string): string;

    var chars: string[];

    chars = array_concat([self.handling_chars, [self.UNICODE_CHAR], self.basic_chars]);

    with str_find_any(str, chars) do
      while __next do

        if __match in self.handling_chars then
          __match = self.ESCAPE_CHAR +__match;

        elsif __match in [self.UNICODE_CHAR] then
          if self.mode_handle_unicode and self.char_is_unicode(__match +__right) then
            __match = self.ESCAPE_CHAR +__match;
          end;

        elsif __match in [self.QUOTE_CHAR] then
          __match = self.ESCAPE_CHAR +__match;

        elsif __match in [self.ESCAPE_CHAR] then
          if self.char_is_escaping(__match +__right) then

            if self.mode_escape_once and self.char_is_escaped(__match +__right, 2) then
              __match = __match +str_splice(__right, "", 1, 1);
            else
              __match = self.ESCAPE_CHAR +__match;
            end;
          end;
        end;
      end;

      __assign(result);
    end;

    return result;
  end;


  func unescape(str: string): string;
    
    var escaped_chars: string[];

    escaped_chars = array_concat([self.handling_chars, [self.UNICODE_CHAR], self.basic_chars]);

    with array_map(escaped_chars) do
      while __next do __apply(self.ESCAPE_CHAR +__item); end; __assign(escaped_chars);
    end;

    with str_find_any(str, escaped_chars) do
      while __next do

        if self.char_is_escaping(__match +__right) then
          __match = str_substr(__match, 2);
        end;
      end;

      __assign(result);
    end;

    return result;
  end;
end