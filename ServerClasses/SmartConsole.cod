class "Класс-обёртка для работы с выводом в консоль";
import classes Functions.Class, Functions.Array;

inclass

  func new: SmartConsole;
    
    return self.create;
  end;

inobject


  var _limit_debug_only: boolean;


  func debug_only(_state: boolean): SmartConsole;
    
    self._limit_debug_only = _state;
    return self;
  end;


  func check_limits: boolean;
    
    return (not self._limit_debug_only or Kernel.System.DebugMode);
  end;


  -- выводит строку в окно сообщений
  -- аргумент message приводится к массиву, затем складывается в строку
  func log(_message: variant): SmartConsole;

    var _console: class;
        _console = class_find("Console");

    if _console <> nil and self.check_limits then _console.Trace(array_implode(array_from(_message))); end;
    return self;
  end;


  -- выводит массив строк в окно сообщений
  -- аргумент messages приводится к массиву
  func log_multi(_messages: variant): SmartConsole;

    var _console: class;
        _console = class_find("Console");

    if _console <> nil and self.check_limits then
      
      with array_each(array_from(_messages)) do
        while __next do _console.Trace(__item); end;
      end;
    end;

    return self;
  end;


  -- очищает окно сообщений
  func clear: SmartConsole;

    var _console: class;
        _console = class_find("Console");

    if _console <> nil and self.check_limits then _console.ClearTrace; end;
    return self;
  end;
end