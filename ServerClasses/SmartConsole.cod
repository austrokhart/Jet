class "Класс-обёртка для работы с выводом в консоль";
import classes Functions.Class, Functions.Array;

inclass

  func new(debug_only: boolean = false): SmartConsole;
    
    result = self.create;
    result.debug_only = debug_only;

    return result;
  end;

inobject


  var debug_only: boolean;


  func check_conditions: boolean;
    
    return (not self.debug_only or Kernel.System.debugMode);
  end;


  -- выводит строку в окно сообщений
  -- аргумент message приводится к массиву, затем складывается в строку
  func log(message: variant): SmartConsole;

    var console: class;
        console = class_find("Console");

    if console <> nil and self.check_conditions then console.trace(array_implode(array_from(message))); end;
    return self;
  end;


  -- выводит массив строк в окно сообщений
  -- аргумент messages приводится к массиву
  func log_multi(messages: variant): SmartConsole;

    var console: class;
        console = class_find("Console");

    if console <> nil and self.check_conditions then
      
      with array_each(array_from(messages)) do
        while __next do console.trace(__item); end;
      end;
    end;

    return self;
  end;


  -- очищает окно сообщений
  func clear: SmartConsole;

    var console: class;
        console = class_find("Console");

    if console <> nil and self.check_conditions then console.clearTrace; end;
    return self;
  end;
end