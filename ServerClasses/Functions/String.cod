class "Класс для работы со строками";
import classes Functions.Variable, Functions.Array, Functions.Indexing, Functions.Math;

inclass


  -- константы для метода str_pad
  type _str_pad_direction = (
    _STR_PAD_LEFT,
    _STR_PAD_RIGHT,
    _STR_PAD_BOTH
  );


  -- константы для метода str_trim
  type _str_trim_direction = (
    _STR_TRIM_LEFT,
    _STR_TRIM_RIGHT,
    _STR_TRIM_BOTH
  );


  -- константы для метода str_pos
  type _str_pos_result = (
    _STR_POS_OFFSET = 1,
    _STR_POS_LENGTH = 2
  );


  type _str_method_find = Methods.Functions.String.Find;


  -- возвращает значение value, приведённое к строке
  func str_from(const _value: variant): string;
    
    return Kernel.System.Str(_value);
  end;


  -- возвращает длину строки str
  func str_length(const _string: string): integer;
    
    return Kernel.System.Length(_string);
  end;


  -- возвращает истину, если строка str не является пустой
  func str_has_content(const _string: string): boolean;
    
    return str_length(_string) <> 0;
  end;


  func str_char_is_set(const _string: string; _index: integer): boolean;
    
    return 1 <= _index and _index <= str_length(_string);
  end;


  -- возвращает символ в строке str по индексу index, если индекс находится в пределах строки, иначе пустую строку
  func str_char(const _string: string; _index: integer; _default_value: string = ""): string;

    _index = handle_offset(_index, str_length(_string));
    return if (str_char_is_set(_string, _index), _string[_index], _default_value);
  end;


  -- возвращает подстроку с началом в offset и длиной length
  func str_substr(const _string: string; _offset: integer = 1; _length: variant = nil; _step: integer = 1): string;

    var i: integer;

    if var_equal(_offset, 1) and var_identical(_length, nil) and var_equal(_step, 1) then return _string; end;

    _offset = handle_offset(_offset, str_length(_string));


    result = "";

    if _step > 0 then
      for i = _offset..(_offset +handle_length(_offset, _length, str_length(_string)) -1) step _step do
        result = result +str_char(_string, i);
      end;

    elsif _step < 0 then
      for i = (_offset +handle_length(_offset, _length, str_length(_string)) -1).._offset step _step do
        result = result +str_char(_string, i);
      end;
    end;


    return result;
  end;


  func str_pos(_string: string; _value: string; _offset: integer = 1): integer;

    return self.str_pos_any(_string, [_value], _offset)[_STR_POS_OFFSET];
  end;


  func str_pos_any(_string: string; _values: string[]; _offset: integer = 1): integer[];

    var _i: integer;

    _offset = handle_offset(_offset, str_length(_string));

    for _offset = _offset..str_length(_string) do

      with array_each(_values) do
        while __next do

          if _offset +str_length(__item) -1 <= str_length(_string) then

            for _i = 1..str_length(__item) do
              if str_char(__item, _i) <> str_char(_string, _offset +_i -1) then break; end;
              if _i = str_length(__item) then return [_offset, str_length(__item)]; end;
            end;
          end;
        end;
      end;
    end;

    return [-1, 0];
  end;


  -- возвращает истину, если в строке str встречается значение из value
  func str_contains(const _string, _value: string; _offset: integer = 1): boolean;
    
    return str_contains_any(_string, [_value], _offset);
  end;


  func str_contains_any(const _string: string; _values: string[]; _offset: integer = 1): boolean;
    
    return str_pos_any(_string, _values, _offset) <> [-1, 0];
  end;


  func str_starts_with(const _string: string; _value: string; _offset: integer = 1): boolean;

    return str_starts_with_any(_string, [_value], _offset);
  end;


  func str_starts_with_any(const _string: string; _values: string[]; _offset: integer = 1): boolean;

    var _i: integer;

    _offset = handle_offset(_offset, str_length(_string));

    with array_each(_values) do
      while __next do

        if _offset +str_length(__item) -1 <= str_length(_string) then

          for _i = 1..str_length(__item) do
            if str_char(__item, _i) <> str_char(_string, _offset +_i -1) then break; end;
            if _i = str_length(__item) then return true; end;
          end;
        end;
      end;
    end;

    return false;
  end;


  func str_ends_with(const _string: string; _value: string; _offset: integer = -1): boolean;

    return str_ends_with_any(_string, [_value], _offset);
  end;


  func str_ends_with_any(const _string: string; _values: string[]; _offset: integer = -1): boolean;

    var _i: integer;

    _offset = handle_offset(_offset, str_length(_string));

    with array_each(_values) do
      while __next do

        if 1 <= _offset -str_length(__item) +1 then

          for _i = 1..str_length(__item) do
            if str_char(__item, -_i) <> str_char(_string, _offset -_i +1) then break; end;
            if _i = str_length(__item) then return true; end;
          end;
        end;
      end;
    end;

    return false;
  end;


  -- возвращает объект класса-обёртки для поиска подстрок
  func str_find(const _string: string; _value: string): _str_method_find;

    return str_find_any(_string, [_value]);
  end;


  func str_find_any(const _string: string; _values: string[]): _str_method_find;

    return _str_method_find.new(_string, _values);
  end;


  -- возвращает строку str, повторённую количество раз count
  func str_repeat(const _string: string; _count: integer): string;
    
    return Kernel.System.RepStr(_string, _count);
  end;


  -- возвращает строку str, дополненную последовательностью value по краям
  func str_pad(const _string: string; _direction: _str_pad_direction; const _value: string; _length: integer): string;

--    var _count: integer;
--
--    -- в случае длины меньше 1 вернём пустую строку
--    if _length < 1 then return ""; end;
--
--    -- в зависимости от направления
--    if _direction = _STR_PAD_LEFT then
--
--      _count = var_to_int(math_ceil((_length -str_length(_string)) /str_length(_value)));
--
--      -- заполним строку слева и выделим подстроку справа
--      result = str_repeat(_value, _count) +_string;
--      result = str_substr(result, -_length, _length);
--
--    elsif _direction = _STR_PAD_RIGHT then
--
--      _count = var_to_int(math_ceil((_length -str_length(_string)) /str_length(_value)));
--
--      -- заполним строку справа и выделим подстроку слева
--      result = _string +str_repeat(_value, _count);
--      result = str_substr(result, 1, _length);
--
--    elsif _direction = _STR_PAD_BOTH then
--
--      _count = var_to_int(math_ceil((_length -str_length(_string)) /(str_length(_value) *2)));
--
--      -- заполним строку с обоих сторон и выделим подстроку по центру
--      result = str_repeat(_value, _count) +_string +str_repeat(_value, _count);
--      result = str_substr(result, var_to_int(math_ceil((str_length(result) -_length) /2)) +1, _length);
--    end;
--
--    return result;


    var _left_padding, _i: integer;


    if _length < 0 then _length = 0; end;

    result = _string;


    if _direction = _STR_PAD_LEFT then
      _left_padding = _length -str_length(result);

    elsif _direction = _STR_PAD_BOTH then
      _left_padding = var_to_int((_length -str_length(result)) /2);

    elsif _direction = _STR_PAD_RIGHT then
      _left_padding = 0;
    end;


    if str_length(result) < _length then
      if str_has_content(_value) then

        for _i = 1.._left_padding do
          result = str_char(_value,  -(mod(_i -1, str_length(_value)) +1)  ) +result;
        end;

        for _i = 1..(_length -str_length(result)) do
          result = result +str_char(_value,  mod(_i -1, str_length(_value)) +1  );
        end;
      end;

    elsif str_length(_string) > _length then

      result = str_substr(result, -_left_padding +1);
      result = str_substr(result, 1, _length);
    end;


    return result;
  end;


  func str_trim(const _string: string; _direction: _str_trim_direction; _value: string = " "): string;

    return str_trim_any(_string, _direction, [_value]);
  end;


  func str_trim_any(const _string: string; _direction: _str_trim_direction; _values: string[] = [" "]): string;

    result = _string;

    if _direction in [_STR_TRIM_LEFT, _STR_TRIM_BOTH] then

      with array_each(_values) do
        while __next do

          if str_starts_with(result, __item) then
            result = str_substr(result, str_length(__item) +1);
            __to_begin;
          end;
        end;
      end;
    end;

    if _direction in [_STR_TRIM_RIGHT, _STR_TRIM_BOTH] then

      with array_each(_values) do
        while __next do

          if str_ends_with(result, __item) then
            result = str_substr(result, 1, -str_length(__item));
            __to_begin;
          end;
        end;
      end;
    end;

    return result;
  end;


  -- заменяет подстроку с началом в offset и длиной length на значение _value и возвращает удалённую подстроку
  func str_splice(var _string: string; const _value: string; _offset: integer; _length: variant = nil): string;

    _offset = handle_offset(_offset, str_length(_string));

    result  = str_substr(_string, _offset, _length);
    _string = str_substr(_string, 1, _offset -1) +_value +str_substr(_string, _offset +handle_length(_offset, _length, str_length(_string)));

    return result;
  end;


  -- возвращает строку str с заменой подстроки с началом в offset и длиной length на значение value
  func str_insert(const _string, _value: string; _offset: integer; _length: variant = nil): string;

    result = _string;
    str_splice(result, _value, _offset, _length);

    return result;
  end;


  func str_replace(const _string: string; _value: string; _replacement: string): string;
    
    return str_replace_any(_string, [_value], _replacement);
  end;


  func str_replace_any(const _string: string; _values: string[]; _replacement: string): string;
    
    with str_find_any(_string, _values) do
      while __next do __match = _replacement; end;
      __assign(result);
    end;

    return result;
  end;


  -- возвращает строку str с применением форматирования
  func str_format(const _string: string; _value: variant): string;


    func form_replacement(_value: string; _brackets_count: integer): string;
      
      return str_repeat("{", _brackets_count) +_value +str_repeat("}", _brackets_count);
    end;


    var _i: integer;

    -- поищем последовательности {}
    with array_each(array_from(_value)) do
      with str_find(_string, "{}").__define_super(__self) do

        while __next do

          -- посчитаем соседние пары скобок
          _i = 1;

          while (str_char_is_set(__left, str_length(__left) -_i +1) and str_char(__left, str_length(__left) -_i +1) = "{") and
                (str_char_is_set(__right, _i) and str_char(__right, _i) = "}")
          do
            _i = _i +1;
          end;

          -- заменим значение в зависимости от количества скобок и наличия замен
          __match = form_replacement(if (mod(_i, 2) = 1 and __super.__next, str_from(__super.__item), ""), div(_i, 2));

          -- если нужно, обрежем соседние скобки
          if _i > 1 then
            __left  = str_substr(__left, 1, -_i +1);
            __right = str_substr(__right, _i);
          end;
        end;

        __assign(result);
      end;
    end;

    return result;
  end;


  func str_explode(const _string: string; _separator: string): string[];

    return str_explode_any(_string, [_separator]);
  end;


  func str_explode_any(const _string: string; _separators: string[]): string[];

    var _offset: integer;

    -- зададим offset для перемещения по строке
    _offset = 1;

    -- для каждого вхождения запишем подстроку от смещения до него, обновим смещение
    -- если вхождений не осталось, запишем оставшуюся подстроку
    with str_find_any(_string, _separators) do

      while __next do
        array_append(result, str_substr(__left, _offset));
        _offset = str_length(__left +__match) +1;
      end;

      array_append(result, __right);
    end;

    return result;
  end;
end


