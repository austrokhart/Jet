class "Класс для работы с датами в формате ISO 8601";
import classes Functions.Variable, Functions.Array, Functions.String, Functions.Date;

inclass


  -- возвращает дату, преобразованную в строку в формате ISO 8601
  -- вида: YYYY-MM-DD[THH:MM:SS(Z|+\-HH:MM)]
  func date_to_ISO(_datetime: date; _UTC_offset: string = Settings._UTC_OFFSET): string;

    result = array_implode([
      str_pad(  str_from(date_year(_datetime)),  _STR_PAD_LEFT, "0", 4),
      str_pad(  str_from(date_month(_datetime)), _STR_PAD_LEFT, "0", 2),
      str_pad(  str_from(date_day(_datetime)),   _STR_PAD_LEFT, "0", 2)
    ], "-");

    if date_has_time(_datetime) then

      result = result +"T" +array_implode([
        str_pad(  str_from(date_hour(_datetime)),   _STR_PAD_LEFT, "0", 2),
        str_pad(  str_from(date_minute(_datetime)), _STR_PAD_LEFT, "0", 2),
        str_pad(  str_from(date_second(_datetime)), _STR_PAD_LEFT, "0", 2)
      ], ":") +_UTC_offset;
    end;

    return result;
  end;


--  func date_is_ISO(datetime: string): boolean;
--
--    var offset, i: integer;
--
--    offset = 1;
--
--    while str_contains(" ", str_char(datetime, offset)) do offset = offset +1; end;
--
--    for i = 1..4 do
--      if not str_contains("0123456789", str_char(datetime, offset +i) then
--
--      end;
--    end;
--  end;


  func date_from_ISO(_datetime: string; _UTC_offset: string = Settings._UTC_OFFSET): date;

    var _date_and_time, _date_parts, _time_parts: variant[];
    var _date_str, _time_str, _offset: string;

    _date_and_time = str_explode(_datetime, "T");
    array_pad(_date_and_time, _ARRAY_PAD_RIGHT, [""], 2);

    _date_str = _date_and_time[1];
    _time_str = _date_and_time[2];

    if str_has_content(_time_str) then _offset = str_splice(_time_str, "", -if (str_ends_with(_time_str, "Z"), 1, 6)); end;

    _date_parts = str_explode(_date_str, "-");
    array_pad(_date_parts, _ARRAY_PAD_RIGHT, [0], 3);

    _time_parts = if (str_has_content(_time_str), str_explode(_time_str, ":"), []); -- array_trim?
    array_pad(_time_parts, _ARRAY_PAD_RIGHT, [0], 3);

    array_extend(_date_parts, _time_parts);

    with array_map(_date_parts) do
      while __next do __apply(var_to_int(__item)); end; __assign(_date_parts);
    end;

    result = date_create(_date_parts[1], _date_parts[2], _date_parts[3], _date_parts[4], _date_parts[5], _date_parts[6]);
    if str_has_content(_offset) then result = date_add_seconds(result, date_parse_ISO_offset(_UTC_offset) -date_parse_ISO_offset(_offset)); end;

    return result;
  end;


  -- возвращает время смещения относительно UTC в секундах
  func date_parse_ISO_offset(_offset: string): integer;

    var _sign, _hours, _minutes: integer;

    if _offset = "Z" then return 0; end;

    _sign    = if (str_substr(_offset, 1, 1) = "+", +1, -1);
    _hours   = var_to_int(str_substr(_offset, 2, 2));
    _minutes = var_to_int(str_substr(_offset, 5, 2));

    return _sign *(_hours *60 *60 +_minutes *60);
  end;
end