class "Класс с методами для работы с классами";
import classes Functions.Class, Functions.Array;

inclass



  func object_member_info(_object: Object; _name: string): MemberInfo;
    
    var _member: MemberInfo;
    _member = class_member_info(class_from(_object), _name);

    return if (_member <> nil and not class_member_info_is_inclass(_member), _member, nil);
  end;

  func object_prop_info(_object: Object; _name: string): MemberInfo;
    
    var _member: MemberInfo;
    _member = class_prop_info(class_from(_object), _name);

    return if (_member <> nil and not class_member_info_is_inclass(_member), _member, nil);
  end;

  func object_proc_info(_object: Object; _name: string): MemberInfo;
    
    var _member: MemberInfo;
    _member = class_proc_info(class_from(_object), _name);

    return if (_member <> nil and not class_member_info_is_inclass(_member), _member, nil);
  end;

  func object_func_info(_object: Object; _name: string): MemberInfo;
    
    var _member: MemberInfo;
    _member = class_func_info(class_from(_object), _name);

    return if (_member <> nil and not class_member_info_is_inclass(_member), _member, nil);
  end;

  func object_method_info(_object: Object; _name: string): MemberInfo;
    
    var _member: MemberInfo;
    _member = class_method_info(class_from(_object), _name);

    return if (_member <> nil and not class_member_info_is_inclass(_member), _member, nil);
  end;



  func object_members_info(_object: Object): MemberInfo[];
    
    with array_filter(class_members_info(class_from(_object))) do
      while __next do __apply(not class_member_info_is_inclass(__item)); end; __assign(result);
    end;

    return result;
  end;

  func object_props_info(_object: Object): MemberInfo[];
    
    with array_filter(class_props_info(class_from(_object))) do
      while __next do __apply(not class_member_info_is_inclass(__item)); end; __assign(result);
    end;

    return result;
  end;

  func object_procs_info(_object: Object): MemberInfo[];
    
    with array_filter(class_members_info(class_from(_object))) do
      while __next do __apply(not class_member_info_is_inclass(__item)); end; __assign(result);
    end;

    return result;
  end;

  func object_funcs_info(_object: Object): MemberInfo[];
    
    with array_filter(class_funcs_info(class_from(_object))) do
      while __next do __apply(not class_member_info_is_inclass(__item)); end; __assign(result);
    end;

    return result;
  end;

  func object_methods_info(_object: Object): MemberInfo[];
    
    with array_filter(class_methods_info(class_from(_object))) do
      while __next do __apply(not class_member_info_is_inclass(__item)); end; __assign(result);
    end;

    return result;
  end;



  func object_members(_object: Object): string[];
    
    with array_map(object_members_info(_object)) do
      while __next do __apply(__item.Name); end; __assign(result);
    end;

    return result;
  end;

  func object_props(_object: Object): string[];
    
    with array_map(object_props_info(_object)) do
      while __next do __apply(__item.Name); end; __assign(result);
    end;

    return result;
  end;

  func object_procs(_object: Object): string[];
    
    with array_map(object_procs_info(_object)) do
      while __next do __apply(__item.Name); end; __assign(result);
    end;

    return result;
  end;

  func object_funcs(_object: Object): string[];
    
    with array_map(object_funcs_info(_object)) do
      while __next do __apply(__item.Name); end; __assign(result);
    end;

    return result;
  end;

  func object_methods(_object: Object): string[];
    
    with array_map(object_members_info(_object)) do
      while __next do __apply(__item.Name); end; __assign(result);
    end;

    return result;
  end;


  func object_has_member(_object: Object; _name: string): boolean;

    return object_member_info(_object, _name) <> nil;
  end;

  func object_has_own_member(_object: Object; _name: string): boolean;

    return not class_member_info_is_internal(object_member_info(_object, _name));
  end;

  func object_has_prop(_object: Object; _name: string): boolean;

    return class_member_info_is_prop(object_member_info(_object, _name));
  end;

  func object_has_proc(_object: Object; _name: string): boolean;
    
    return class_member_info_is_proc(object_member_info(_object, _name));
  end;

  func object_has_func(_object: Object; _name: string): boolean;
    
    return class_member_info_is_func(object_member_info(_object, _name));
  end;

  func object_has_method(_object: Object; _name: string): boolean;
    
    return class_member_info_is_method(object_member_info(_object, _name));
  end;



  func object_get_prop(_object: Object; _name: string): variant;
    
    return _object.GetField(_name);
  end;

  proc object_set_prop(_object: Object; _name: string; _value: variant);
    
    _object.SetField(_name, _value);
  end;



  func object_call_proc(_object: Object; _name: string; _arguments: variant[]): variant;

    if class_has_proc(class_from(_object), _name) then
      return object_call_method(_object, _name, _arguments);
    end;

    return nil;
  end;

  func object_call_func(_object: Object; _name: string; _arguments: variant[]): variant;

    if class_has_func(class_from(_object), _name) then
      return object_call_method(_object, _name, _arguments);
    end;

    return nil;
  end;

  func object_call_method(_object: Object; _name: string; _arguments: variant[]): variant;

    var _member: MemberInfo;

    _member = class_member_info(class_from(_object), _name);

    if class_member_info_is_proc(_member) then
      (_member as MethodInfo).CallProcEx(_object, _arguments);
      return nil;

    elsif class_member_info_is_func(_member) then
      return (_member as MethodInfo).CallFuncEx(_object, _arguments);

    else
      return nil;
    end;
  end;
end