class "Класс для работы с классами";
import classes Functions.Class;

inclass



  func object_class_name(obj: Object): string;

    return class_name(class_from(obj));
  end;

  func object_class_description(obj: Object): string;
    
    return class_description(class_from(obj));
  end;



  func object_class_members(obj: Object): string[];
    
    return class_members(class_from(obj));
  end;

  func object_class_props(obj: Object): string[];
    
    return class_props(class_from(obj));
  end;

  func object_class_procs(obj: Object): string[];
    
    return class_procs(class_from(obj));
  end;

  func object_class_funcs(obj: Object): string[];
    
    return class_funcs(class_from(obj));
  end;

  func object_class_methods(obj: Object): string[];
    
    return class_methods(class_from(obj));
  end;



  func object_class_has_member(obj: Object; name: string): boolean;

    return class_has_member(class_from(obj), name);
  end;

  func object_class_has_internal_member(obj: Object; name: string): boolean;

    return class_has_internal_member(class_from(obj), name);
  end;

  func object_class_has_prop(obj: Object; name: string): boolean;

    return class_has_prop(class_from(obj), name);
  end;

  func object_class_has_proc(obj: Object; name: string): boolean;
    
    return class_has_proc(class_from(obj), name);
  end;

  func object_class_has_func(obj: Object; name: string): boolean;
    
    return class_has_func(class_from(obj), name);
  end;

  func object_class_has_method(obj: Object; name: string): boolean;
    
    return class_has_method(class_from(obj), name);
  end;



  func object_get_prop(obj: Object; name: string): variant;
    
    return obj.getClassField(name);
  end;

  proc object_set_prop(obj: Object; name: string; value: variant);
    
    obj.setClassField(name, value);
  end;



  func object_call_proc(obj: Object; name: string; arguments: variant[]): variant;

    var member: MemberInfo;

    member = class_member_info(class_from(obj), name);
    if class_member_info_is_proc(member) then (member as MethodInfo).callProcEx(obj, arguments); end;

    return nil;
  end;

  func object_call_func(obj: Object; name: string; arguments: variant[]): variant;

    var member: MemberInfo;

    member = class_member_info(class_from(obj), name);
    if class_member_info_is_func(member) then (member as MethodInfo).callFuncEx(obj, arguments); end;

    return nil;
  end;

  func class_call_method(obj: Object; name: string; arguments: variant[]): variant;

    if object_class_has_proc(obj, name) then
      return object_call_proc(obj, name, arguments);

    elsif object_class_has_func(obj, name) then
      return object_call_func(obj, name, arguments);
    end;

    return nil;
  end;
end