class "Класс для работы с переменными";
import classes Functions.Variable, Functions.Array;

inclass


  -- Методы для определения типов
  --

  -- Для определения типов используется стандартная функция varType;
  -- Для определения используются константы, которые не инициализируются в проекте СИС2 из-за некорректного условия.
  --
  -- Из СИС2:
  --
  -- varUnknown : Integer= 0;  -- неизвестный тип
  -- varString  : Integer = 1;  -- строка
  -- varInt     : Integer = 2;  -- 4-байтовое целое
  -- varNumeric : Integer = 3;  -- Число с плавающей точкой
  -- varLogical : Integer = 4;  -- Логическое (булево) значение
  -- varDate    : Integer = 5;  -- ДатаВремя в формате TDateTime
  -- varObject  : Integer = 6;  -- Объект
  -- varVariant : Integer = 7;  -- Вариант
  -- varArray   : Integer = 8;  -- Массив
  -- varClass   : Integer = 9;  -- Указатель на класс
  -- varNull    : Integer = 10; -- Пусто
  --
  -- varUnit    :Integer = 17; -- Измеритель
  -- varUser    :Integer = 50; -- Пользовательский тип, в частности, этот тип
  --                           -- имеют параметры процедур и функций типа Массив

  type var_type = (
    var_string  = 1,
    var_integer = 2,
    var_float   = 3,
    var_boolean = 4,
    var_date    = 5,
    var_object  = 6,
    var_variant = 7,
    var_array   = 8,
    var_class   = 9,
    var_nil     = 10
  );


  -- проверяет равенство значений
  func var_equal(value: variant; other_value: variant): boolean;

    -- если типы значений равны
    -- или оба значения являются числами
    -- или одно из них равно nil
    if (System.varType(value) = System.varType(other_value))
       or (self.var_is_numeric(value) and self.var_is_numeric(other_value))
       or (self.var_is_nil(value) or self.var_is_nil(other_value))
    then

      result = (value = other_value);
    else
      result = false;
    end;
  end;


  -- проверяет неравенство значений
  func var_not_equal(value: variant; other_value: variant): boolean;
    
    result = not self.var_equal(value, other_value);
  end;


  -- проверяет идентичность значений, возвращает истину если значения и типы переменных совпадают
  func var_identical(value: variant; other_value: variant): boolean;
    
    result = (System.varType(value) = System.varType(other_value) and value = other_value);
  end;


  -- проверяет неидентичность
  func var_not_identical(value: variant; other_value: variant): boolean;
    
    result = not self.var_identical(value, other_value);
  end;


  -- проверяет принадлежность значения
  func var_is_string(const value: variant): boolean;

    result = (System.varType(value) = self.var_string);
  end;


  -- проверяет принадлежность значения
  func var_is_integer(value: variant): boolean;
    
    result = (System.varType(value) = self.var_integer);
  end;


  -- проверяет принадлежность значения
  func var_is_float(value: variant): boolean;
    
    result = (System.varType(value) = self.var_float);
  end;


  -- проверяет принадлежность значения
  func var_is_numeric(value: variant): boolean;
    
    result = (self.var_is_integer(value) or self.var_is_float(value));
  end;


  -- проверяет принадлежность значения
  func var_is_boolean(value: variant): boolean;
    
    result = (System.varType(value) = self.var_boolean);
  end;


  -- проверяет принадлежность значения
  func var_is_date(value: variant): boolean;
    
    result = (System.varType(value) = self.var_date);
  end;


  -- проверяет принадлежность значения
  func var_is_object(value: variant): boolean;
    
    result = (System.varType(value) = self.var_object);
  end;


  -- проверяет принадлежность значения
  func var_is_variant(value: variant): boolean;
    
    result = (System.varType(value) = self.var_variant);
  end;


  -- проверяет принадлежность значения
  func var_is_array(value: variant): boolean;

    result = (System.varType(value) = self.var_array);
  end;


  -- проверяет принадлежность значения
  func var_is_class(value: variant): boolean;

    result = (System.varType(value) = self.var_class);
  end;


  -- проверяет принадлежность значения
  func var_is_nil(value: variant): boolean;
    
    result = (System.varType(value) = self.var_nil);
  end;


  -- проверяет принадлежность значения к типу, в качестве аргумента expected необходимо передать соответствующую константу класса
  func var_type_is(value: variant; expected: variant): boolean;

    if self.var_is_integer(expected) then
      result = (System.varType(value) = expected);

    elsif self.var_is_class(expected) then
      result = ((self.var_is_class(value) or self.var_is_object(value)) and value.inheritsFrom(expected));

    else
      result = false;
    end;
  end;


  -- проверяет принадлежность значения к типу, аргумент expected приводится к массиву
  func var_type_in(value: variant; expected: variant): boolean;

    with array_each(array_from(expected)) do
      while __next do
        if not self.var_type_is(value, __item) then return false; end;
      end;
    end;

    result = true;
  end;


  -- проверяет для значения принадлежность к типу объект и к классу expected
  func var_instance_of(value: variant; expected: class): boolean;
    
    result = (self.var_is_object(value) and value.inheritsFrom(expected));
  end;


  func var_address(var variable: variant): integer;
    
    return System.varAddr("variable");
  end;


  -- обменивает значения переменных
  proc var_swap(var variable: variant; var other_variable: variant);
    
    var temp: variant;
        temp = variable;

    variable = other_variable;
    other_variable = temp;
  end;
end