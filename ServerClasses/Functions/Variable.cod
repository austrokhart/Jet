class "Класс для работы с переменными";
import classes Functions.Array, Functions.Class, Functions.Object;

inclass


  type _var_type = (
    _TYPE_STRING  = 1,
    _TYPE_INTEGER = 2,
    _TYPE_REAL    = 3,
    _TYPE_BOOLEAN = 4,
    _TYPE_DATE    = 5,
    _TYPE_OBJECT  = 6,
    _TYPE_VARIANT = 7,
    _TYPE_ARRAY   = 8,
    _TYPE_CLASS   = 9,
    _TYPE_NIL     = 10
  );


--  func var_to_bool(const _value: variant): boolean;
--
--
--  end;

  func var_to_int(const _value: variant): integer;
    
    return Kernel.Mathematic.Int(Kernel.Mathematic.Trunc(_value));
  end;

  func var_to_real(const _value: variant): real;
    
    return Kernel.Mathematic.Num(_value);
  end;

  func var_to_str(const _value: variant): string;
    
    return Kernel.System.Str(_value);
  end;


  func var_to_dump(const _value: variant): string;


    var _escaper: Escaper;


    func to_str(_value: variant): string;


      func from_nil(_value: variant): string;
      
        return '(nil) nil';
      end;

      func from_boolean(_value: boolean): string;
      
        return '(boolean) ' +if (_value, 'true', 'false');
      end;

      func from_integer(_value: integer): string;
      
        return '(integer) ' +var_to_str(_value);
      end;

      func from_real(_value: real): string;
      
        return '(real) ' +var_to_str(_value);
      end;

      func from_string(_value: string): string;
      
        return '(string) "' +_escaper.escape(_value) +'"';
      end;

      func from_date(_value: string): string;
      
        return '(date) ' +var_to_str(_value);
      end;

      func from_array(_value: variant[]): string;

        var _values: variant[];

        _values = _value;

        with array_map(_values) do
          while __next do __apply(to_str(__item)); end; __assign(_values);
        end;

        return '(array) [' +array_implode(_values, ', ') +']';
      end;

      func from_class(_value: class): string;

        return '(class) ' +class_name(_value);
      end;

      func from_object(_value: Object): string;
        
        var _properties: string[];

        _properties = object_props(_value);

        with array_filter(_properties) do
          while __next do __apply(object_has_own_member(_value, __item)); end; __assign(_properties);
        end;

        with array_map(_properties) do
          while __next do __apply(__item +': ' +to_str(object_get_prop(_value, __item))); end; __assign(_properties);
        end;

        return '(object) ' +class_name(class_from(_value)) +' {' +array_implode(_properties, ', ') +'}';
      end;

      func from_unknown(_value: variant): string;
        
        return '(unknown) ' +var_to_str(_value);
      end;


      if var_is_nil(_value) then
        return from_nil(_value);

      elsif var_is_boolean(_value) then
        return from_boolean(_value);

      elsif var_is_integer(_value) then
        return from_integer(_value);

      elsif var_is_real(_value) then
        return from_real(_value);

      elsif var_is_string(_value) then
        return from_string(_value);

      elsif var_is_date(_value) then
        return from_date(_value);

      elsif var_is_array(_value) then
        return from_array(_value);

      elsif var_is_class(_value) then
        return from_class(_value);

      elsif var_is_object(_value) then
        return from_object(_value);

      else
        return from_unknown(_value);
      end;
    end;


    _escaper = Escaper.new;

    return to_str(_value);
  end;


  func var_is_string(const _value: variant): boolean;

    return Kernel.System.VarType(_value) = _TYPE_STRING;
  end;

  func var_is_integer(const _value: variant): boolean;
    
    return Kernel.System.VarType(_value) = _TYPE_INTEGER;
  end;

  func var_is_real(_value: variant): boolean;
    
    return Kernel.System.VarType(_value) = _TYPE_REAL;
  end;

  func var_is_number(_value: variant): boolean;
    
    return var_is_integer(_value) or var_is_real(_value);
  end;

  func var_is_boolean(_value: variant): boolean;
    
    return Kernel.System.VarType(_value) = _TYPE_BOOLEAN;
  end;

  func var_is_date(_value: variant): boolean;
    
    return Kernel.System.VarType(_value) = _TYPE_DATE;
  end;

  func var_is_object(_value: variant): boolean;
    
    return Kernel.System.VarType(_value) = _TYPE_OBJECT;
  end;

  func var_is_variant(_value: variant): boolean;
    
    return Kernel.System.VarType(_value) = _TYPE_VARIANT;
  end;

  func var_is_array(_value: variant): boolean;

    return Kernel.System.VarType(_value) = _TYPE_ARRAY;
  end;

  func var_is_class(_value: variant): boolean;

    return Kernel.System.VarType(_value) = _TYPE_CLASS;
  end;

  func var_is_nil(_value: variant): boolean;
    
    return Kernel.System.VarType(_value) = _TYPE_NIL;
  end;


  -- проверяет равенство значений
  func var_equal(const _value, _other_value: variant): boolean;

    return _value in [_other_value];
  end;

  -- проверяет неравенство значений
  func var_not_equal(const _value, _other_value: variant): boolean;
    
    return not var_equal(_value, _other_value);
  end;


  -- проверяет идентичность значений, возвращает истину если значения и типы переменных совпадают
  func var_identical(_value, _other_value: variant): boolean;
    
    return Kernel.System.VarType(_value) = Kernel.System.VarType(_other_value) and var_equal(_value, _other_value);
  end;

  -- проверяет неидентичность
  func var_not_identical(_value, _other_value: variant): boolean;
    
    return not var_identical(_value, _other_value);
  end;


  -- проверяет принадлежность значения к типу, в качестве аргумента expected необходимо передать соответствующую константу класса
  func var_type_is(_value: variant; _expected: _var_type): boolean;

    return Kernel.System.VarType(_value) = _expected;
  end;

  func var_class_is(_value: variant; _expected: class): boolean;
    
    return (var_is_class(_value) or var_is_object(_value)) and _value.InheritsFrom(_expected);
  end;

  -- проверяет для значения принадлежность к типу объект и к классу expected
  func var_instance_of(_value: variant; _expected: class): boolean;
    
    return var_is_object(_value) and _value.InheritsFrom(_expected);
  end;



  -- обменивает значения переменных
  proc var_swap(var _variable: variant; var _other_variable: variant);
    
    var _temp: variant;
        _temp = _variable;

    _variable = _other_variable;
    _other_variable = _temp;
  end;
end