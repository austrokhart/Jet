class "Класс для работы с переменными";
import classes Functions.Variable, Functions.Array;

inclass


  type var_type = (
    TYPE_STRING  = 1,
    TYPE_INTEGER = 2,
    TYPE_REAL    = 3,
    TYPE_BOOLEAN = 4,
    TYPE_DATE    = 5,
    TYPE_OBJECT  = 6,
    TYPE_VARIANT = 7,
    TYPE_ARRAY   = 8,
    TYPE_CLASS   = 9,
    TYPE_NIL     = 10
  );


  func var_int(const value: variant): integer;
    
    return Kernel.Mathematic.int(Kernel.Mathematic.trunc(value));
  end;

  func var_real(const value: variant): real;
    
    return Kernel.Mathematic.num(value);
  end;


  func var_is_string(const value: variant): boolean;

    return Kernel.System.varType(value) = TYPE_STRING;
  end;

  func var_is_integer(const value: variant): boolean;
    
    return Kernel.System.varType(value) = TYPE_INTEGER;
  end;

  func var_is_real(value: variant): boolean;
    
    return Kernel.System.varType(value) = TYPE_REAL;
  end;

  func var_is_number(value: variant): boolean;
    
    return var_is_integer(value) or var_is_real(value);
  end;

  func var_is_boolean(value: variant): boolean;
    
    return Kernel.System.varType(value) = TYPE_BOOLEAN;
  end;

  func var_is_date(value: variant): boolean;
    
    return Kernel.System.varType(value) = TYPE_DATE;
  end;

  func var_is_object(value: variant): boolean;
    
    return Kernel.System.varType(value) = TYPE_OBJECT;
  end;

  func var_is_variant(value: variant): boolean;
    
    return Kernel.System.varType(value) = TYPE_VARIANT;
  end;

  func var_is_array(value: variant): boolean;

    return Kernel.System.varType(value) = TYPE_ARRAY;
  end;

  func var_is_class(value: variant): boolean;

    return Kernel.System.varType(value) = TYPE_CLASS;
  end;

  func var_is_nil(value: variant): boolean;
    
    return Kernel.System.varType(value) = TYPE_NIL;
  end;


  -- проверяет равенство значений
  func var_equal(const value, other_value: variant): boolean;

    -- если типы значений равны
    -- или оба значения являются числами
    -- или одно из них равно nil
    if (Kernel.System.varType(value) = Kernel.System.varType(other_value)) or
       (var_is_number(value) and var_is_number(other_value)) or
       (var_is_nil(value)     or var_is_nil(other_value))
    then

      return value = other_value;
    else
      return false;
    end;
  end;


  -- проверяет неравенство значений
  func var_not_equal(const value, other_value: variant): boolean;
    
    return not var_equal(value, other_value);
  end;


  -- проверяет идентичность значений, возвращает истину если значения и типы переменных совпадают
  func var_identical(value, other_value: variant): boolean;
    
    return Kernel.System.varType(value) = Kernel.System.varType(other_value) and value = other_value;
  end;


  -- проверяет неидентичность
  func var_not_identical(value, other_value: variant): boolean;
    
    return not var_identical(value, other_value);
  end;


  -- проверяет принадлежность значения к типу, в качестве аргумента expected необходимо передать соответствующую константу класса
  func var_type_is(value: variant; expected: variant): boolean;

    if var_is_integer(expected) then
      result = (Kernel.System.varType(value) = expected);

    elsif var_is_class(expected) then
      result = ((var_is_class(value) or var_is_object(value)) and value.inheritsFrom(expected));

    else
      result = false;
    end;
  end;


--  -- проверяет принадлежность значения к типу, аргумент expected приводится к массиву
--  func var_type_in(value: variant; expected: variant): boolean;
--
--    with array_each(array_from(expected)) do
--      while __next do
--        if not var_type_is(value, __item) then return false; end;
--      end;
--    end;
--
--    result = true;
--  end;


  -- проверяет для значения принадлежность к типу объект и к классу expected
  func var_instance_of(value: variant; expected: class): boolean;
    
    result = (var_is_object(value) and value.inheritsFrom(expected));
  end;


  -- обменивает значения переменных
  proc var_swap(var variable: variant; var other_variable: variant);
    
    var temp: variant;
        temp = variable;

    variable = other_variable;
    other_variable = temp;
  end;
end