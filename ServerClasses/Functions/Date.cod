class "Класс для работы с датами";
import classes Functions.Variable, Functions.Array, Functions.String;

inclass


  -- возвращает дату на основе указанных данных
  func date_create(_year, _month, _day: integer; _hour: integer = 0; _minute: integer = 0; _second: integer = 0): date;
    
    return Kernel.System.CreateDate(_day, _month, _year, _hour, _minute, _second);
  end;


  func date_now: date;
    
    return Kernel.System.Now;
  end;


  -- возвращает номер секунды в дате
  func date_second(const _datetime: date): real;
    
    return Kernel.System.Second(_datetime);
  end;


  -- возвращает номер минуты в дате
  func date_minute(const _datetime: date): integer;
    
    return Kernel.System.Minute(_datetime);
  end;


  -- возвращает номер часа в дате
  func date_hour(const _datetime: date): integer;
    
    return Kernel.System.Hour(_datetime);
  end;


  -- возвращает номер дня в дате
  func date_day(const _datetime: date): integer;
    
    return Kernel.System.Day(_datetime);
  end;


  -- возвращает номер месяца в дате
  func date_month(const _datetime: date): integer;
    
    return Kernel.System.Mon(_datetime);
  end;


  -- возвращает номер года в дате
  func date_year(const _datetime: date): integer;
    
    return Kernel.System.Year(_datetime);
  end;


  -- возвращает количество секунд между двумя датами
  func date_period(const _datetime, _other_datetime: date): real;
    
    return Kernel.System.PeriodSec(_other_datetime, _datetime);
  end;


  -- возвращает дату с отрбрасыванием времени
  func date_only_date(const _datetime: date): date;
    
    return date_create(date_year(_datetime), date_month(_datetime), date_day(_datetime));
  end;


  -- возвращает время с отбрасыванием даты
  func date_only_time(const _datetime: date): date;
    
    return date_create(0, 0, 0, date_hour(_datetime), date_minute(_datetime), var_to_int(date_second(_datetime)));
  end;


  func date_has_time(const _datetime: date): boolean;
    
    return date_hour(_datetime) <> 0 or date_minute(_datetime) <> 0 or date_second(_datetime) <> 0;
  end;


  -- возвращает дату с добавлением секунд
  func date_add_seconds(const _datetime: date; _value: real): date;

    return Kernel.System.AddSec(_datetime, _value);
  end;


  -- возвращает дату с добавлением минут
  func date_add_minutes(const _datetime: date; _value: integer): date;
    
    return date_add_seconds(_datetime, _value *60);
  end;


  -- возвращает дату с добавлением часов
  func date_add_hours(const _datetime: date; _value: integer): date;
    
    return date_add_minutes(_datetime, _value *60);
  end;


  -- возвращает дату с добавлением дней
  func date_add_days(const _datetime: date; _value: integer): date;
    
    return _datetime +1;
  end;


  -- возвращает дату с добавлением месяцев
  func date_add_months(const _datetime: date; _value: integer): date;

    var _hours, _minutes: integer;
    var _seconds: real;

    _hours   = date_hour(_datetime);
    _minutes = date_minute(_datetime);
    _seconds = date_second(_datetime);

    result = Kernel.System.AddMonth(_datetime, _value);
    result = date_add_hours(result, _hours);
    result = date_add_minutes(result, _minutes);
    result = date_add_seconds(result, _seconds);

    return result;
  end;


  -- возвращает дату с добавлением лет
  func date_add_years(const _datetime: date; _value: integer): date;
    
    return date_add_months(_datetime, _value *12);
  end;
end