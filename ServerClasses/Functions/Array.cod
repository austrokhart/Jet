class "Класс с методами для работы с массивами";
import classes Functions.Indexing, Functions.Math, Functions.Variable;

inclass


  type _array_pad_direction = (
    _ARRAY_PAD_LEFT,
    _ARRAY_PAD_RIGHT,
    _ARRAY_PAD_BOTH
  );


  type _array_trim_direction = (
    _ARRAY_TRIM_LEFT,
    _ARRAY_TRIM_RIGHT,
    _ARRAY_TRIM_BOTH
  );


  type _array_pos_result = (
    _ARRAY_POS_OFFSET = 1,
    _ARRAY_POS_LENGTH = 2
  );


  type _array_method_each   = Methods.Functions.Array.Each;
  type _array_method_filter = Methods.Functions.Array.Filter;
  type _array_method_map    = Methods.Functions.Array.Map;
  type _array_method_reduce = Methods.Functions.Array.Reduce;


  func array_from(const _value: variant): variant[];

    if var_is_array(_value) then
      result = _value;

    elsif var_is_nil(_value) then
      result = [];

    else
      result = [_value];
    end;
  end;


  func array_length(const _array: variant[]): integer;
    
    return Kernel.System.LengthOfArray(_array);
  end;


  func array_has_content(const _array: variant[]): boolean;

    return array_length(_array) <> 0;
  end;


  func array_get(const _array: variant[]; _index: integer; _default_value: variant = nil): variant;

    return md_array_get(_array, _index, [], _default_value);
  end;


  proc array_set(var _array: variant[]; _index: integer; _value: variant);

    md_array_set(_array, _index, [], _value);
  end;


  proc array_unset(var _array: variant[]; _index: integer);

    md_array_unset(_array, _index, nil);
  end;


  func array_is_set(const _array: variant[]; _index: integer): boolean;

    return md_array_is_set(_array, _index, nil);
  end;


  proc array_clear(var _array: variant[]);

    md_array_clear(_array, []);
  end;


  proc array_append(var _array: variant[]; _value: variant);

    Kernel.System.InsertInArray(_array, array_length(_array) +1, _value);
  end;


  proc array_prepend(var _array: variant[]; _value: variant);

    Kernel.System.InsertInArray(_array, 1, _value);
  end;


  proc array_extend(var _array: variant[]; _value: variant[]);

    var _i: integer;

    for _i = 1..array_length(_value) do
      array_append(_array, _value[_i]);
    end;
  end;


  func array_pos(const _array: variant[]; _value: variant[]; _offset: integer = 1): integer;

    return md_array_pos(_array, nil, _value, _offset);
  end;


  func array_pos_any(const _array: variant[]; _values: variant[2]; _offset: integer = 1): integer[];

    return md_array_pos_any(_array, nil, _values, _offset);
  end;


  func array_contains(const _array: variant[]; _value: variant[]; _offset: integer = 1): boolean;
    
    return md_array_contains(_array, nil, _value, _offset);
  end;


  func array_contains_any(const _array: variant[]; _values: variant[2]; _offset: integer = 1): boolean;
    
    return md_array_contains_any(_array, nil, _values, _offset);
  end;


  func array_starts_with(const _array: variant[]; _value: variant[]; _offset: integer = 1): boolean;
    
    return md_array_starts_with(_array, nil, _value, _offset);
  end;


  func array_starts_with_any(const _array: variant[]; _values: variant[2]; _offset: integer = 1): boolean;
    
    return md_array_starts_with_any(_array, nil, _values, _offset);
  end;


  func array_ends_with(const _array: variant[]; _value: variant[]; _offset: integer = -1): boolean;
    
    return md_array_ends_with(_array, nil, _value, _offset);
  end;


  func array_ends_with_any(const _array: variant[]; _values: variant[2]; _offset: integer = -1): boolean;
    
    return md_array_ends_with_any(_array, nil, _values, _offset);
  end;


  func array_slice(const _array: variant[]; _offset: integer = 1; _length: variant = nil; _step: integer = 1): variant[];

    return md_array_slice(_array, nil, _offset, _length, _step);
  end;


  func array_splice(var _array: variant[]; _value: variant[]; _offset: integer = 1; _length: variant = nil): variant[];

    -- функция извлекает подмассив с началом в offset и длиной length и заменяет его на элементы массива value

    var _i: integer;

    _offset = handle_offset(_offset, array_length(_array));

    for _i = (_offset +handle_length(_offset, _length, array_length(_array)) -1).._offset step -1 do
      array_prepend(result, _array[_i]);
      array_unset(_array, _i);
    end;

    for _i = 1..array_length(_value) do
      Kernel.System.insertInArray(_array, _offset +_i -1, _value[_i]);
    end;

    return result;
  end;


  func array_insert(const _array: variant[]; _value: variant[]; _offset: integer = 1; _length: variant = nil): variant[];
    
    result = _array;
    array_splice(result, _value, _offset, _length);

    return result;
  end;


  func array_concat(const _values: variant[]): variant[];

    var _i: integer;

    for _i = 1..array_length(_values) do
      array_extend(result, array_from(_values[_i]));
    end;

    return result;
  end;


  func array_repeat(const _value: variant[]; _count: integer): variant[];

    var _i: integer;

    for _i = 1.._count do
      array_extend(result, _value);
    end;

    return result;
  end;


  proc array_swap(var _array: variant[]; _index, _other_index: integer);
    
    var _temp: variant;

    _index       = handle_offset(_index, array_length(_array));
    _other_index = handle_offset(_other_index, array_length(_array));

    _temp = md_array_get(_array, _index);

    md_array_set(_array, _index, nil, md_array_get(_array, _other_index));
    md_array_set(_array, _other_index, nil, _temp);
  end;


  proc array_reverse(var _array: variant[]);

    var _i: integer;

    for _i = 1..var_to_int(array_length(_array) /2) do
      array_swap(_array, _i, array_length(_array) -_i +1);
    end;
  end;


  proc array_pad(var _array: variant[]; _direction: _array_pad_direction; _value: variant[]; _length: integer);

    -- функция должна дополнить (значениями value) или сократить массив array, в зависимости от длины length,
    -- слева и/или справа, в зависимости от направления direction
    --
    -- используем алгоритм:
    -- узнаем, сколько элементов нужно добавить или удалить слева, это зависит от направления direction
    -- если массив меньше длины length, добавим полученное количество элементов слева и дополним до длины length справа
    -- если массив больше длины length, удалим полученное количество элементов слева и сократим до длины length справа

    var _left_padding, _i: integer;

    if _length < 0 then _length = 0;  end;


    if _direction = _ARRAY_PAD_LEFT then
      _left_padding = _length -array_length(_array);

    elsif _direction = _ARRAY_PAD_BOTH then
      _left_padding = var_to_int((_length -array_length(_array)) /2);

    elsif _direction = _ARRAY_PAD_RIGHT then
      _left_padding = 0;
    end;


    if array_length(_array) < _length then
      if array_has_content(_value) then

        for _i = 1.._left_padding do
          array_prepend(_array,  md_array_get(_value, -(mod(_i -1, array_length(_value)) +1))  );
        end;

        for _i = 1..(_length -array_length(_array)) do
          array_append(_array,  md_array_get(_value, mod(_i -1, array_length(_value)) +1)  );
        end;
      end;

    elsif array_length(_array) > _length then

      for _i = -_left_padding..1 step -1 do
        md_array_unset(_array, _i);
      end;

      for _i = array_length(_array)..(_length +1) step -1 do
        md_array_unset(_array, _i);
      end;
    end;
  end;


  proc array_trim(var _array: variant[]; _direction: _array_trim_direction; _value: variant[]);

    array_trim_any(_array, _direction, [_value]);
  end;


  proc array_trim_any(var _array: variant[]; _direction: _array_trim_direction; _values: variant[2]);

    var _i: integer;
    var _value: variant[];

    if _direction in [_ARRAY_TRIM_LEFT, _ARRAY_TRIM_BOTH] then

      for _i = 1..array_length(_values) do

        _value = _values[_i];

        if md_array_starts_with(_array, nil, _value) then
          array_splice(_array, nil, 1, array_length(_value));
          _i = 1;
        end;
      end;
    end;

    if _direction in [_ARRAY_TRIM_RIGHT, _ARRAY_TRIM_BOTH] then

      for _i = 1..array_length(_values) do

        _value = _values[_i];

        if md_array_ends_with(_array, nil, _value) then
          array_splice(_array, nil, -array_length(_value));
          _i = 1;
        end;
      end;
    end;
  end;


  proc array_sort(var _array: variant[]);

    md_array_sort(_array, nil);
  end;


  func array_each(const _array: variant[]): _array_method_each;
    
    return _array_method_each.new(_array);
  end;


  func array_filter(const _array: variant[]): _array_method_filter;
    
    return _array_method_filter.new(_array);
  end;


  func array_map(const _array: variant[]): _array_method_map;
    
    return _array_method_map.new(_array);
  end;


  func array_reduce(const _array: variant[]; _initial_value: variant): _array_method_reduce;
    
    return _array_method_reduce.new(_array, _initial_value);
  end;


  func array_implode(const _array: variant[]; _separator: string = " "): string;

    var _i: integer;

    for _i = 1..array_length(_array) do
      result = result +if (_i <> 1, _separator, "") +str(_array[_i]);
    end;

    return result;
  end;


  func md_array_get(const _array: variant[]; _index: integer; _path: integer[] = []; _default_value: variant = nil): variant;

    -- функция должна возвращать значение элемента с индексом index и последующими индексами path в массиве array, если элемент установлен, иначе значение по-умолчанию
    --
    -- используем алгоритм:
    -- для начала проверим, что элемент с индексом index установлен (это быстро, потому что проверка проходит на единственной плоскости)
    -- если установлен, то: если измерение path не задано, вернём значение элемента, иначе вызовем функцию рекурсивно с сокращением path;
    -- иначе вернём значение по-умолчанию

    _index = handle_offset(_index, array_length(_array));

    if md_array_is_set(_array, _index) then
      if not array_has_content(_path) then
        return _array[_index];

      elsif var_is_array(_array[_index]) then
        return md_array_get(_array[_index], _path[1], md_array_slice(_path, nil, 2), _default_value);
      end;
    end;

    return _default_value;
  end;


  proc md_array_set(var _array: variant[]; _index: integer; _path: integer[] = []; _value: variant);

    -- функция должна устанавливать элемент с индексом index, последующими индексами path и значением value в массиве array
    --
    -- используем алгоритм:
    --
    -- если измерение path не задано, установим значение (это быстро, потому что перед нами единственная плоскость, где всегда можно установить элемент)
    -- иначе если элемент установлен и является массивом, вызовем функцию рекурсивно с сокращением path
    --
    -- передача неустановленного значения по ссылке задаёт его со значением nil!
    -- поэтому до рекурсивного вызова используется проверка на установленность элемента

    _index = handle_offset(_index, array_length(_array));

    if not array_has_content(_path) then
      _array[_index] = _value;

    elsif md_array_is_set(_array, _index) and var_is_array(_array[_index]) then
      md_array_set(_array[_index], _path[1], md_array_slice(_path, nil, 2), _value);
    end;
  end;


  proc md_array_unset(var _array: variant[]; _index: integer; _path: integer[] = []);

    -- алгоритм аналогчен использующемуся в процедуре md_array_set

    _index = handle_offset(_index, array_length(_array));

    if not array_has_content(_path) then
      Kernel.System.deleteFromArray(_array, _index);

    elsif md_array_is_set(_array, _index) and var_is_array(_array[_index]) then
      md_array_unset(_array[_index], _path[1], md_array_slice(_path, nil, 2));
    end;
  end;


  func md_array_is_set(const _array: variant[]; _index: integer; _path: integer[] = []): boolean;

    -- функция возвращает истину, если в массиве array установлен элемент с индексом index и последующими индексами path

    -- используем алгоритм:
    -- индекс установлен, если он больше нуля и вызов функции nextArrItem для предыущего индекса возвращает исходный индекс
    -- если индекс установлен, то: если измерение path задано, вызовем функцию рекурсивно с сокращением path, иначе вернём истину;
    -- иначе вернём ложь

    if _index > 0 and Kernel.System.nextArrItem(_array, _index -1) = _index then

      if not array_has_content(_path) then
        return true;

      elsif var_is_array(_array[_index]) then
        return md_array_is_set(_array[_index], _path[1], md_array_slice(_path, nil, 2));
      end;
    end;

    return false;
  end;


  proc md_array_clear(var _array: variant[]; _path: integer[] = []);

    -- во время разустановки происходит смещение индексов, что не даёт обработать элементы по порядку
    -- поэтому обработаем в обратном порядке

    var _i: integer;

    for _i = array_length(_array)..1 step -1 do
      md_array_unset(_array, _i, _path);
    end;
  end;


  func md_array_pos(const _array: variant[]; _path: integer[] = []; _value: variant[]; _offset: integer = 1): integer;

    return md_array_pos_any(_array, _path, [_value], _offset)[_ARRAY_POS_OFFSET];
  end;


  func md_array_pos_any(const _array: variant[]; _path: integer[] = []; _values: variant[2]; _offset: integer = 1): integer[];

    var _value_index, _i: integer;
    var _value: variant[];

    _offset = handle_offset(_offset, array_length(_array));

    for _offset = _offset..array_length(_array) do
      for _value_index = 1..array_length(_values) do

        _value = _values[_value_index];

        if _offset +array_length(_value) -1 <= array_length(_array) then

          for _i = 1..array_length(_value) do
            if md_array_get(_array, _offset +_i -1, _path) <> _value[_i] then break; end;
            if _i = array_length(_value) then return [_offset, array_length(_value)]; end;
          end;
        end;
      end;
    end;

    return [-1, 0];
  end;


  func md_array_contains(const _array: variant[]; _path: integer[] = []; _value: variant[]; _offset: integer = 1): boolean;
    
    return md_array_contains_any(_array, _path, [_value], _offset);
  end;


  func md_array_contains_any(const _array: variant[]; _path: integer[] = []; _values: variant[2]; _offset: integer = 1): boolean;
    
    return md_array_pos_any(_array, _path, _values, _offset) <> [-1, 0];
  end;


  func md_array_starts_with(const _array: variant[]; _path: integer[] = []; _value: variant[]; _offset: integer = 1): boolean;
    
    return md_array_starts_with_any(_array, _path, [_value], _offset);
  end;


  func md_array_starts_with_any(const _array: variant[]; _path: integer[] = []; _values: variant[2]; _offset: integer = 1): boolean;

    var _value_index, _i: integer;
    var _value: variant[];

    _offset = handle_offset(_offset, array_length(_array));

    for _value_index = 1..array_length(_values) do

      _value = _values[_value_index];

      if _offset +array_length(_value) -1 <= array_length(_array) then

        for _i = 1..array_length(_value) do
          if md_array_get(_array, _offset +_i -1, _path) <> md_array_get(_value, _i) then break; end;
          if _i = array_length(_value) then return true; end;
        end;
      end;
    end;

    return false;
  end;


  func md_array_ends_with(const _array: variant[]; _path: integer[] = []; _value: variant[]; _offset: integer = -1): boolean;
    
    return md_array_ends_with_any(_array, _path, [_value], _offset);
  end;


  func md_array_ends_with_any(const _array: variant; _path: integer[] = []; _values: variant[2]; _offset: integer = -1): boolean;
    
    var _value_index, _i: integer;
    var _value: variant[];

    _offset = handle_offset(_offset, array_length(_array));

    for _value_index = 1..array_length(_values) do

      _value = _values[_value_index];

      if 1 <= _offset -array_length(_value) +1 then

        for _i = 1..array_length(_value) do
          if md_array_get(_array, _offset -_i +1, _path) <> md_array_get(_value, -_i) then break; end;
          if _i = array_length(_value) then return true; end;
        end;
      end;
    end;
  end;


  func md_array_slice(const _array: variant[]; _path: integer[] = []; _offset: integer = 1; _length: variant = nil; _step: integer = 1): variant[];

    var _i: integer;

    if var_equal(_offset, 1) and var_identical(_length, nil) and var_equal(_step, 1) then return _array; end;

    _offset = handle_offset(_offset, array_length(_array));


    result = [];

    if _step > 0 then
      for _i = _offset..(_offset +handle_length(_offset, _length, array_length(_array)) -1) step _step do
        array_append(result, md_array_get(_array, _i, _path));
      end;

    elsif _step < 0 then
      for _i = (_offset +handle_length(_offset, _length, array_length(_array)) -1).._offset step _step do
        array_append(result, md_array_get(_array, _i, _path));
      end;
    end;


    return result;
  end;


  proc md_array_sort(var _array: variant[]; _path: integer[] = []);

    Kernel.System.sortArray(_array, _path);
  end;
end