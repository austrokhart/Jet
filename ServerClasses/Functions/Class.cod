class "Класс для работы с классами";
import classes Functions.Variable, Functions.Array;

inclass


  func class_from(_value: variant): class;
    
    if var_is_class(_value) or var_is_object(_value) then
      return _value.ClassType;
    else
      return nil;
    end;
  end;



  func class_find(_name: string): class;
    
    return Kernel.System.FindClass(_name);
  end;

  func class_exists(_name: string): boolean;
    
    return class_find(_name) <> nil;
  end;



  func class_name(_class: class): string;
    
    return _class.ClassName;
  end;

  func class_description(_class: class): string;
    
    return _class.ClassInfo.Description;
  end;



  func class_member_info(_class: class; _name: string): MemberInfo;

    var _member: MemberInfo;

    _member = _class.ClassInfo.MemberByName(_name);
    return _member;
  end;

  func class_prop_info(_class: class; _name: string): MemberInfo;

    var _member: MemberInfo;

    _member = class_member_info(_class, _name);
    return if (_member <> nil and class_member_info_is_prop(_member), _member, nil);
  end;

  func class_proc_info(_class: class; _name: string): MemberInfo;

    var _member: MemberInfo;

    _member = class_member_info(_class, _name);
    return if (_member <> nil and class_member_info_is_proc(_member), _member, nil);
  end;

  func class_func_info(_class: class; _name: string): MemberInfo;

    var _member: MemberInfo;

    _member = class_member_info(_class, _name);
    return if (_member <> nil and class_member_info_is_func(_member), _member, nil);
  end;

  func class_method_info(_class: class; _name: string): MemberInfo;

    var _member: MemberInfo;

    _member = class_member_info(_class, _name);
    return if (_member <> nil and class_member_info_is_method(_member), _member, nil);
  end;



  func class_members_info(_class: class): MemberInfo[];
    
    var _i: integer;
    
    for _i = 1.._class.ClassInfo.MembersCount do
      array_append(result, _class.ClassInfo.Member[_i]);
    end;

    return result;
  end;

  func class_props_info(_class: class): MemberInfo[];
    
    with array_filter(class_members_info(_class)) do
      while __next do __apply(class_member_info_is_prop(__item)); end; __assign(result);
    end;

    return result;
  end;

  func class_procs_info(_class: class): MemberInfo[];
    
    with array_filter(class_members_info(_class)) do
      while __next do __apply(class_member_info_is_proc(__item)); end; __assign(result);
    end;

    return result;
  end;

  func class_funcs_info(_class: class): MemberInfo[];
    
    with array_filter(class_members_info(_class)) do
      while __next do __apply(class_member_info_is_func(__item)); end; __assign(result);
    end;

    return result;
  end;

  func class_methods_info(_class: class): MemberInfo[];
    
    with array_filter(class_members_info(_class)) do
      while __next do __apply(class_member_info_is_method(__item)); end; __assign(result);
    end;

    return result;
  end;



  func class_member_info_is_internal(_member: MemberInfo): boolean;

    return _member <> nil and _member.Internal;
  end;

  func class_member_info_is_inclass(_member: MemberInfo): boolean;

    return _member <> nil and _member is MethodInfo and (_member as MethodInfo).InClassProperty;
  end;

  func class_member_info_is_prop(_member: MemberInfo): boolean;

    return _member <> nil and (_member is MethodInfo and (_member as MethodInfo).Kind = MethodInfo.mkProp);
  end;

  func class_member_info_is_proc(_member: MemberInfo): boolean;

    return _member <> nil and (_member is MethodInfo and (_member as MethodInfo).Kind = MethodInfo.mkProc);
  end;

  func class_member_info_is_func(_member: MemberInfo): boolean;

    return _member <> nil and (_member is MethodInfo and (_member as MethodInfo).Kind = MethodInfo.mkFunc);
  end;

  func class_member_info_is_method(_member: MemberInfo): boolean;

    return _member <> nil and (class_member_info_is_proc(_member) or class_member_info_is_func(_member));
  end;



  func class_members(_class: class): string[];
    
    with array_map(class_members_info(_class)) do
      while __next do __apply(__item.Name); end; __assign(result);
    end;

    return result;
  end;

  func class_props(_class: class): string[];
    
    with array_map(class_props_info(_class)) do
      while __next do __apply(__item.Name); end; __assign(result);
    end;

    return result;
  end;

  func class_procs(_class: class): string[];
    
    with array_map(class_procs_info(_class)) do
      while __next do __apply(__item.Name); end; __assign(result);
    end;

    return result;
  end;

  func class_funcs(_class: class): string[];
    
    with array_map(class_funcs_info(_class)) do
      while __next do __apply(__item.Name); end; __assign(result);
    end;

    return result;
  end;

  func class_methods(_class: class): string[];
    
    with array_map(class_methods_info(_class)) do
      while __next do __apply(__item.Name); end; __assign(result);
    end;

    return result;
  end;



  func class_has_member(_class: class; _name: string): boolean;

    return class_member_info(_class, _name) <> nil;
  end;

  func class_has_own_member(_class: class; _name: string): boolean;

    return not class_member_info_is_internal(class_member_info(_class, _name));
  end;

  func class_has_prop(_class: class; _name: string): boolean;

    return class_member_info_is_prop(class_member_info(_class, _name));
  end;

  func class_has_proc(_class: class; _name: string): boolean;
    
    return class_member_info_is_proc(class_member_info(_class, _name));
  end;

  func class_has_func(_class: class; _name: string): boolean;
    
    return class_member_info_is_proc(class_member_info(_class, _name));
  end;

  func class_has_method(_class: class; _name: string): boolean;
    
    return class_member_info_is_method(class_member_info(_class, _name));
  end;



  func class_get_prop(_class: class; _name: string): variant;
    
    return _class.GetClassField(_name);
  end;

  proc class_set_prop(_class: class; _name: string; _value: variant);
    
    _class.SetClassField(_name, _value);
  end;



  func class_call_proc(_class: class; _name: string; _arguments: variant[] = []): variant;

    if class_has_proc(_class, _name) then
      return class_call_method(_class, _name, _arguments);
    end;

    return nil;
  end;

  func class_call_func(_class: class; _name: string; _arguments: variant[] = []): variant;

    if class_has_func(_class, _name) then
      return class_call_method(_class, _name, _arguments);
    end;

    return nil;
  end;

  func class_call_method(_class: class; _name: string; _arguments: variant[] = []): variant;

    var _member: MemberInfo;

    _member = class_member_info(_class, _name);

    if class_member_info_is_proc(_member) then
      (_member as MethodInfo).CallProcEx(_class, _arguments);
      return nil;

    elsif class_member_info_is_func(_member) then
      return (_member as MethodInfo).CallFuncEx(_class, _arguments);

    else
      return nil;
    end;
  end;
end