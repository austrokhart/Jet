class "Класс для работы с классами";
import classes Functions.Variable, Functions.Array;

inclass



  func class_find(name: string): class;
    
    return Kernel.System.findClass(name);
  end;

  func class_member(cls: class; name: string): MemberInfo;
    
    return cls.classInfo.memberByName(name);
  end;

  func class_prop(cls: class; name: string): MemberInfo;

    result = class_member(cls, name);
    return if (member_is_prop(result), result, nil);
  end;

  func class_method(cls: class; name: string): MemberInfo;

    result = class_member(cls, name);
    return if (member_is_method(result), result, nil);
  end;

  func class_proc(cls: class; name: string): MemberInfo;

    result = class_member(cls, name);
    return if (member_is_proc(result), result, nil);
  end;

  func class_func(cls: class; name: string): MemberInfo;

    result = class_member(cls, name);
    return if (member_is_func(result), result, nil);
  end;



  func class_members(cls: class): MemberInfo[];

    -- возвращает члены класса
    -- в членах класса помимо свойств и процедур/функций встречаются другие вещи, например типы
    
    with Iterator.new(1, cls.classInfo.membersCount) do
      while __next do array_append(result, cls.classInfo.member[__index]); end;
    end;

    return result;
  end;

  func class_props(cls: class): MethodInfo[];

    with array_filter(class_members(cls)) do
      while __next do __apply(member_is_prop(__item)); end; __assign(result);
    end;

    return result;
  end;

  func class_procs(cls: class): MethodInfo[];
    
    with array_filter(class_members(cls)) do
      while __next do __apply(member_is_proc(__item)); end; __assign(result);
    end;

    return result;
  end;

  func class_funcs(cls: class): MethodInfo[];
    
    with array_filter(class_members(cls)) do
      while __next do __apply(member_is_func(__item)); end; __assign(result);
    end;

    return result;
  end;

  func class_methods(cls: class): MethodInfo[];
    
    with array_filter(class_members(cls)) do
      while __next do __apply(member_is_method(__item)); end; __assign(result);
    end;

    return result;
  end;



  func class_has_member(cls: class; name: string): boolean;
    
    return class_member(cls, name) <> nil;
  end;

  func class_has_prop(cls: class; name: string): boolean;
    
    return class_prop(cls, name) <> nil;
  end;

  func class_has_method(cls: class; name: string): boolean;
    
    return class_method(cls, name) <> nil;
  end;

  func class_has_proc(cls: class; name: string): boolean;
    
    return class_proc(cls, name) <> nil;
  end;

  func class_has_func(cls: class; name: string): boolean;
    
    return class_func(cls, name) <> nil;
  end;



  func member_is_internal(member: MemberInfo): boolean;
    
    return member.internal;
  end;

  func member_is_prop(member: MemberInfo): boolean;
    
    return member is MethodInfo and (member as MethodInfo).kind = MethodInfo.mkProp;
  end;

  func member_is_method(member: MethodInfo): boolean;
    
    return member_is_proc(member) or member_is_func(member);
  end;

  func member_is_proc(member: MemberInfo): boolean;
    
    return member is MethodInfo and (member as MethodInfo).kind = MethodInfo.mkProc;
  end;

  func member_is_func(member: MemberInfo): boolean;
    
    return member is MethodInfo and (member as MethodInfo).kind = MethodInfo.mkFunc;
  end;



  func call_proc(method: MethodInfo; context: object; arguments: variant[]): variant;
    
    if member_is_proc(method) then method.callProcEx(context, arguments); end;
    return nil;
  end;

  func call_func(method: MethodInfo; context: object; arguments: variant[]): variant;
    
    if member_is_func(method) then return method.callFuncEx(context, arguments); end;
    return nil;
  end;

  func call_method(method: MethodInfo; context: object; arguments: variant[]): variant;
    
    if member_is_proc(method) then
      result = call_proc(method, context, arguments);

    elsif member_is_func(method) then
      result = call_func(method, context, arguments);
    end;

    return result;
  end;
end