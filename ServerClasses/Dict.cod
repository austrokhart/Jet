class "Класс для работы со словарями (ассоциативными массивами)";
import classes Functions.Array;

inclass


  type pair_member = (
    PAIR_KEY   = 1,
    PAIR_VALUE = 2
  );


  -- создаёт новый экземпляр класса
  func new: Dict;

    return self.create;
  end;


  -- формирует словарь из массива ключей и массива значений
  func combine(const keys: string[]; const values: variant[]): Dict;

    result = self.create;

    with Iterator.new(1, array_length(keys)) do
      while __next do result.set(keys[__index], values[__index]); end;
    end;

    return result;
  end;


inobject


  var content: variant[2];


  -- возвращает индекс пары с ключом
  func pair_index(key: string): integer;
    
    return array_pos(self.content, [key], [self.PAIR_KEY])[ARRAY_POS_OFFSET];
  end;


  -- возвращает значение из словаря по ключу
  func get(key: string; default_value: variant = nil): variant;

    var index: integer;
        index = self.pair_index(key);

    if index <> -1 then
      result = array_get(self.content, index, [self.PAIR_VALUE], default_value);
    else
      result = default_value;
    end;

    return result;
  end;


  -- устанавливает значение в словаре по ключу
  func set(key: string; value: variant): Dict;
    
    var index: integer;
        index = self.pair_index(key);

    if index <> -1 then
      array_set(self.content, index, value, [self.PAIR_VALUE]);
    else
      array_append(self.content, [key, value] as variant[]);
    end;

    return self;
  end;


  -- разустанавливает значение по ключу
  func unset(key: string): Dict;
    
    var index: integer;
        index = self.pair_index(key);

    if index <> -1 then
      array_unset(self.content, index);
    end;

    return self;
  end;


  -- возвращает истину, если по ключу установлено значение
  func is_set(key: string): boolean;
    
    return self.pair_index(key) <> -1;
  end;


  -- очищает словарь
  func clear: Dict;
    
    array_clear(self.content);
    return self;
  end;


  -- расширяет словарь другим словарём
  func extend(const other_dict: Dict): Dict;

    with array_each(other_dict.pairs) do
      while __next do self.set(array_get(__item, self.PAIR_KEY), array_get(__item, self.PAIR_VALUE)); end;
    end;

    return self;
  end;


  -- возвращает копию словаря
  func copy: Dict;

    result = self.new;

    with array_each(self.pairs) do
      while __next do result.set(array_get(__item, self.PAIR_KEY), array_get(__item, self.PAIR_VALUE)); end;
    end;

    return result;
  end;


  -- возвращает ключи в словаре
  func keys: string[];
    
    with array_map(self.content) do
      while __next do __apply(array_get(__item, self.PAIR_KEY)); end; __assign(result);
    end;

    return result;
  end;


  -- возвращает значения в словаре
  func values: variant[];
    
    with array_map(self.content) do
      while __next do __apply(array_get(__item, self.PAIR_VALUE)); end; __assign(result);
    end;

    return result;
  end;


  func pairs: variant[];
    
    return self.content;
  end;


--  func each: Functions.DictMethods.Each;
--
--    Result = ;
--  end;
--
--
--  func filter: Functions.DictMethods.Filter;
--
--    Result = ;
--  end;
--
--
--  func map: Functions.DictMethods.Map;
--
--    Result = ;
--  end;
--
--
--  func reduce: Functions.DictMethods.Reduce;
--
--    Result = ;
--  end;
end