class "Класс для работы со словарями (ассоциативными массивами)";
import classes Functions.Array;

inclass


  type pair_member = (
    _PAIR_KEY   = 1,
    _PAIR_VALUE = 2
  );


  -- создаёт новый экземпляр класса
  func new: Dict;

    return self.create;
  end;


  -- формирует словарь из массива ключей и массива значений
  func combine(const _keys: string[]; const _values: variant[]): Dict;

    result = self.create;

    with Iterator.new(1, array_length(_keys)) do
      while __next do result.set(_keys[__index], _values[__index]); end;
    end;

    return result;
  end;


inobject


  var _content: variant[2];


  -- возвращает индекс пары с ключом
  func pair_index(_key: string): integer;
    
    return md_array_pos(self._content, [self._PAIR_KEY], [_key]);
  end;


  -- возвращает значение из словаря по ключу
  func get(_key: string; _default_value: variant = nil): variant;

    var _index: integer;
        _index = self.pair_index(_key);

    if _index <> -1 then
      result = md_array_get(self._content, _index, [self._PAIR_VALUE], _default_value);
    else
      result = _default_value;
    end;

    return result;
  end;


  -- устанавливает значение в словаре по ключу
  func set(_key: string; _value: variant): Dict;
    
    var _index: integer;
        _index = self.pair_index(_key);

    if _index <> -1 then
      md_array_set(self._content, _index, [self._PAIR_VALUE], _value);
    else
      array_append(self._content, [_key, _value] as variant[]);
    end;

    return self;
  end;


  -- разустанавливает значение по ключу
  func unset(_key: string): Dict;
    
    var _index: integer;
        _index = self.pair_index(_key);

    if _index <> -1 then
      array_unset(self._content, _index);
    end;

    return self;
  end;


  -- возвращает истину, если по ключу установлено значение
  func is_set(_key: string): boolean;
    
    return self.pair_index(_key) <> -1;
  end;


  -- очищает словарь
  func clear: Dict;
    
    array_clear(self._content);
    return self;
  end;


  -- расширяет словарь другим словарём
  func extend(const _other_dict: Dict): Dict;

    with array_each(_other_dict.pairs) do
      while __next do self.set(array_get(__item, self._PAIR_KEY), array_get(__item, self._PAIR_VALUE)); end;
    end;

    return self;
  end;


  -- возвращает копию словаря
  func copy: Dict;

    result = self.new;

    with array_each(self.pairs) do
      while __next do result.set(array_get(__item, self._PAIR_KEY), array_get(__item, self._PAIR_VALUE)); end;
    end;

    return result;
  end;


  -- возвращает ключи в словаре
  func keys: string[];
    
    with array_map(self._content) do
      while __next do __apply(array_get(__item, self._PAIR_KEY)); end; __assign(result);
    end;

    return result;
  end;


  -- возвращает значения в словаре
  func values: variant[];
    
    with array_map(self._content) do
      while __next do __apply(array_get(__item, self._PAIR_VALUE)); end; __assign(result);
    end;

    return result;
  end;


  func pairs: variant[];
    
    return self._content;
  end;


--  func each: Functions.DictMethods.Each;
--
--    Result = ;
--  end;
--
--
--  func filter: Functions.DictMethods.Filter;
--
--    Result = ;
--  end;
--
--
--  func map: Functions.DictMethods.Map;
--
--    Result = ;
--  end;
--
--
--  func reduce: Functions.DictMethods.Reduce;
--
--    Result = ;
--  end;
end