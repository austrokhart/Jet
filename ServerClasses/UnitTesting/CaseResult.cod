class "Класс для хранения результатов выполнения тестовой ситуации";
import classes Functions.String, Functions.Array;

inclass


  -- создаёт новый экземпляр класса
  func new(name: string = nil; asserts: UnitTesting.AssertResult[] = []; comment: string = ""): UnitTesting.CaseResult;
    
    result = self.create;

    result.name    = name;
    result.asserts = asserts;
    result.comment = comment;

    return result;
  end;

inobject


  var name:    string;
  var asserts: UnitTesting.AssertResult[];
  var comment: string;
  var time:    real;


  -- добавляет результат проверки в результаты
  func add(assert: UnitTesting.AssertResult): UnitTesting.CaseResult;

    array_append(self.asserts, assert);
    return self;
  end;


  func took(time: real): UnitTesting.CaseResult;
    
    self.time = time;
    return self;
  end;


  -- возвращает истину, если результаты успешены
  func is_successful: boolean;
    
    with array_each(self.asserts) do
      while __next do
        if not __item.is_successful then return false; end;
      end;
    end;

    return true;
  end;


  -- возвращает количество проверок в результатах
  func assert_count: integer;

    return array_length(self.asserts);
  end;


  -- возвращает успешные проверки из результатов
  func successful_asserts: UnitTesting.AssertResult[];

    with array_filter(self.asserts) do
      while __next do __apply(__item.is_successful); end; __assign(result);
    end;

    return result;
  end;


  -- возвращает неудачные проверки из результатов
  func unsuccessful_asserts: UnitTesting.AssertResult[];
    
    with array_filter(self.asserts) do
      while __next do __apply(not __item.is_successful); end; __assign(result);
    end;

    return result;
  end;


  -- возвращает текстовое представление случая
  func to_text: string[];

    if self.is_successful then
      array_append(result, str_format("случай {} ({})... {}", [self.name, self.comment, "успех"]));

    else
      array_append(result, str_format("случай {} ({})... {}", [self.name, self.comment, "неудача"]));

      with array_each(self.asserts) do
        while __next do array_append(result, str_format("..{}. {}", [__index, __item.to_text])); end;
      end;
    end;

    return result;
  end;
end