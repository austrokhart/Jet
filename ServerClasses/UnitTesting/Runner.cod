class "Класс для проведения тестов";
import classes Functions.Class, Functions.String, Functions.Array;

inclass


  -- выполняет тесты, значение аргумента suites приводится к массиву
  func run(_suites: class[]): UnitTesting.RunResult;

    var _timer: Timer;

    -- заполняем результат
    result = UnitTesting.RunResult.new;
    _timer = Timer.new;

    with array_each(array_from(_suites)) do
      while __next do result.add_suite(self.handle_suite(__item)); end;
    end;

    result.took(_timer.passed);

    return result;
  end;


  -- обрабатывает тестовый набор
  func handle_suite(_suite: class): UnitTesting.SuiteResult;

    var _timer: Timer;

    result = UnitTesting.SuiteResult.new(class_name(_suite), [], class_description(_suite));
    _timer = Timer.new;

    with array_each(class_methods(_suite)) do
      while __next do
        if class_has_own_member(_suite, __item) then result.add_case(self.handle_case(_suite, __item)); end;
      end;
    end;

    result.took(_timer.passed);

    return result;
  end;


  -- обрабатывает тестовую ситуацию
  func handle_case(_suite: class; _case: string): UnitTesting.CaseResult;

    var _wrap: UnitTesting.Case;
    var _timer: Timer;

    if class_has_proc(_suite, _case) then

      _wrap  = UnitTesting.Case.new(UnitTesting.CaseResult.new(_case));
      _timer = Timer.new;

      class_call_proc(_suite, _case, [_wrap]);

      result = _wrap._container;
      result.took(_timer.passed);

      return result;

    elsif class_has_func(_suite, _case) then

      result = class_call_func(_suite, _case)._container;
      result.took(_timer.passed);

      return result;

    else
      return nil;
    end;
  end;
end