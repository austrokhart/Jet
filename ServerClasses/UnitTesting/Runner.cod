class "Класс для проведения тестов";
import classes Functions.Class, Functions.String, Functions.Array;

inclass


  -- выполняет тесты, значение аргумента suites приводится к массиву
  func run(suites: class[]): UnitTesting.RunResult;

    -- заполняем результат
    result = UnitTesting.RunResult.new;

    with array_each(array_from(suites)) do
      while __next do result.add(self.handle_suite(__item)); end;
    end;

    return result;
  end;


  -- обрабатывает тестовый набор
  func handle_suite(suite: class): UnitTesting.SuiteResult;

    result = UnitTesting.SuiteResult.new(class_name(suite), class_description(suite));

    with array_each(class_methods(suite)) do
      while __next do
        if not class_has_internal_member(suite, __item) then result.add(self.handle_case(suite, __item)); end;
      end;
    end;

    return result;
  end;


  -- обрабатывает тестовую ситуацию
  func handle_case(suite: class; case: string): UnitTesting.CaseResult;

    var wrap: UnitTesting.Case;

    if class_has_proc(suite, case) then

      wrap = UnitTesting.Case.new(UnitTesting.CaseResult.new(case));
      class_call_proc(suite, case, [wrap]);

      return wrap.container;

    elsif class_has_func(suite, case) then
      return class_call_func(suite, case).container;

    else
      return nil;
    end;
  end;
end