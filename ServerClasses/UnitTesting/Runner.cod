class "Класс для проведения тестов";
import classes Functions.Class, Functions.String, Functions.Array;

inclass


  -- выполняет тесты, значение аргумента suites приводится к массиву
  func run(suites: variant): UnitTesting.RunResult;

    -- заполняем результат
    result = UnitTesting.RunResult.new;

    with array_each(array_from(suites)) do
      while __next do result.add(self.handle_suite(__item)); end;
    end;

    return result;
  end;


  -- обрабатывает тестовый набор
  func handle_suite(suite_class: class): UnitTesting.SuiteResult;

    var cases: variant[];

    -- получаем методы набора
    cases = class_methods(suite_class);

    with array_filter(cases) do
      while __next do __apply(not member_is_internal(__item)); end; __assign(cases);
    end;

    -- заполняем результат по данным класса
    result = UnitTesting.SuiteResult.new(suite_class.className, suite_class.classInfo.description);

    with array_each(cases) do
      while __next do result.add(self.handle_case(__item)); end;
    end;

    return result;
  end;


  -- обрабатывает тестовую ситуацию
  func handle_case(case_method: MethodInfo): UnitTesting.CaseResult;

    -- объект MethodInfo соответствует информации о члене класса; член класса, если он является процедурой, можно выполнить с помощью метода объекта callProc,
    -- где первым аргументом идёт контекст, а последующими аргументы самого метода

    var case: UnitTesting.Case;

    -- создаём экземпляр Case, передаём его в метод
    case   = UnitTesting.Case.new(UnitTesting.CaseResult.new(case_method.name));
    result = call_method(case_method, nil, [case]);

    return if (result = nil, case.container, result);
  end;
end