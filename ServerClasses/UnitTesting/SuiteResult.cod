class "Класс для хранения результатов выполнения тестового набора";
import classes Functions.String, Functions.Array;

inclass


  -- возвращает новый экземпляр класса
  func new(name: string; cases: UnitTesting.CaseResult[] = []; comment: string = ""): UnitTesting.SuiteResult;
    
    result = self.create;

    result.name    = name;
    result.cases   = cases;
    result.comment = comment;

    return result;
  end;

inobject


  var name:    string;
  var cases:   UnitTesting.CaseResult[];
  var comment: string;
  var time:    real;


  -- добавляет результат тестового случая в результаты
  func add(case: UnitTesting.CaseResult): UnitTesting.SuiteResult;
    
    array_append(self.cases, case);
    return self;
  end;


  func took(time: real): UnitTesting.SuiteResult;
    
    self.time = time;
    return self;
  end;


  -- возвращает истину, если результаты успешны
  func is_successful: boolean;
    
    with array_each(self.cases) do
      while __next do
        if not __item.is_successful then return false; end;
      end;
    end;

    return true;
  end;


  -- возвращает количество тестовых случаев в результатах
  func case_count: integer;

    return array_length(self.cases);
  end;


  func assert_count: integer;
    
    with array_reduce(self.cases, 0) do
      while __next do __apply(__result +__item.assert_count); end; __assign(result);
    end;

    return result;
  end;


  -- возвращает успешные тестовые случаи из результатов
  func successful_cases: UnitTesting.CaseResult[];
    
    with array_filter(self.cases) do
      while __next do __apply(__item.is_successful); end; __assign(result);
    end;

    return result;
  end;


  -- возвращает неудачные тестовые случаи из результатов
  func unsuccessful_cases: UnitTesting.CaseResult[];
    
    with array_filter(self.cases) do
      while __next do __apply(not __item.is_successful); end; __assign(result);
    end;

    return result;
  end;


  -- возвращает текстовое представление набора
  func to_text: string[];

    array_append(result, str_format("набор {} ({}):", [self.name, self.comment]));

    with array_each(self.cases) do
      while __next do

        with array_each(__item.to_text) do
          while __next do array_append(result, str_format("..{}", __item)); end;
        end;
      end;
    end;

    return result;
  end;
end